{"ast":null,"code":"var _jsxFileName = \"/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/components/workout/ExerciseSearch.js\";\nimport React, { createElement as _createElement } from 'react';\nimport { Autocomplete, TextField, CircularProgress, Typography, Grid, Box } from '@mui/material';\nimport FitnessCenterIcon from '@mui/icons-material/FitnessCenter';\n\n/**\n * Reusable exercise search component with autocomplete\n * @param {Object} props - Component props\n * @param {Array} props.exercises - Array of exercise search results\n * @param {boolean} props.loading - Whether search is loading\n * @param {string} props.selectedExerciseId - Currently selected exercise ID\n * @param {Function} props.onSearch - Handler for search input changes\n * @param {Function} props.onSelect - Handler for exercise selection\n * @param {string} props.label - Label for the search field\n * @param {string} props.placeholder - Placeholder text\n * @param {boolean} props.disabled - Whether the component is disabled\n * @returns {JSX.Element} Exercise search component\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExerciseSearch = ({\n  exercises = [],\n  loading = false,\n  selectedExerciseId,\n  onSearch,\n  onSelect,\n  label = \"Search and Select Exercise\",\n  placeholder = \"Type to search for exercises...\",\n  disabled = false\n}) => {\n  // Find selected exercise from the list\n  const selectedExercise = exercises.find(ex => ex.id === selectedExerciseId) || null;\n\n  /**\n   * Render individual exercise option\n   * @param {Object} props - Props from Autocomplete\n   * @param {Object} option - Exercise option\n   * @returns {JSX.Element} Exercise option component\n   */\n  const renderOption = (props, option) => /*#__PURE__*/_createElement(\"li\", {\n    ...props,\n    key: option.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      py: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(FitnessCenterIcon, {\n      sx: {\n        mr: 2,\n        color: 'primary.main',\n        flexShrink: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        minWidth: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        noWrap: true,\n        children: option.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"text.secondary\",\n        noWrap: true,\n        children: [\"Primary: \", (option.primary_muscle_groups || []).join(', ') || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), option.supporting_muscle_groups && option.supporting_muscle_groups.length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"text.secondary\",\n        display: \"block\",\n        noWrap: true,\n        children: [\"Supporting: \", option.supporting_muscle_groups.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    options: exercises,\n    getOptionLabel: option => option.name || '',\n    value: selectedExercise,\n    loading: loading,\n    disabled: disabled,\n    onInputChange: (event, newInputValue) => {\n      if (onSearch) {\n        onSearch(newInputValue);\n      }\n    },\n    onChange: (event, newValue) => {\n      if (onSelect) {\n        onSelect(newValue);\n      }\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      ...params,\n      label: label,\n      placeholder: placeholder,\n      fullWidth: true,\n      InputProps: {\n        ...params.InputProps,\n        endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"inherit\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 28\n          }, this) : null, params.InputProps.endAdornment]\n        }, void 0, true)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this),\n    renderOption: renderOption,\n    isOptionEqualToValue: (option, value) => option.id === value.id,\n    filterOptions: x => x // Don't filter client-side since we're doing server-side search\n    ,\n    noOptionsText: \"Type at least 2 characters to search for exercises\",\n    loadingText: \"Searching exercises...\",\n    sx: {\n      mb: 2\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = ExerciseSearch;\nexport default ExerciseSearch;\nvar _c;\n$RefreshReg$(_c, \"ExerciseSearch\");","map":{"version":3,"names":["React","createElement","_createElement","Autocomplete","TextField","CircularProgress","Typography","Grid","Box","FitnessCenterIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","ExerciseSearch","exercises","loading","selectedExerciseId","onSearch","onSelect","label","placeholder","disabled","selectedExercise","find","ex","id","renderOption","props","option","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","sx","display","alignItems","width","py","children","mr","color","flexShrink","flex","minWidth","variant","noWrap","name","primary_muscle_groups","join","supporting_muscle_groups","length","options","getOptionLabel","value","onInputChange","event","newInputValue","onChange","newValue","renderInput","params","fullWidth","InputProps","endAdornment","size","isOptionEqualToValue","filterOptions","x","noOptionsText","loadingText","mb","_c","$RefreshReg$"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/components/workout/ExerciseSearch.js"],"sourcesContent":["import React from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  CircularProgress,\n  Typography,\n  Grid,\n  Box\n} from '@mui/material';\nimport FitnessCenterIcon from '@mui/icons-material/FitnessCenter';\n\n/**\n * Reusable exercise search component with autocomplete\n * @param {Object} props - Component props\n * @param {Array} props.exercises - Array of exercise search results\n * @param {boolean} props.loading - Whether search is loading\n * @param {string} props.selectedExerciseId - Currently selected exercise ID\n * @param {Function} props.onSearch - Handler for search input changes\n * @param {Function} props.onSelect - Handler for exercise selection\n * @param {string} props.label - Label for the search field\n * @param {string} props.placeholder - Placeholder text\n * @param {boolean} props.disabled - Whether the component is disabled\n * @returns {JSX.Element} Exercise search component\n */\nconst ExerciseSearch = ({\n  exercises = [],\n  loading = false,\n  selectedExerciseId,\n  onSearch,\n  onSelect,\n  label = \"Search and Select Exercise\",\n  placeholder = \"Type to search for exercises...\",\n  disabled = false\n}) => {\n  // Find selected exercise from the list\n  const selectedExercise = exercises.find(ex => ex.id === selectedExerciseId) || null;\n\n  /**\n   * Render individual exercise option\n   * @param {Object} props - Props from Autocomplete\n   * @param {Object} option - Exercise option\n   * @returns {JSX.Element} Exercise option component\n   */\n  const renderOption = (props, option) => (\n    <li {...props} key={option.id}>\n      <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', py: 1 }}>\n        <FitnessCenterIcon sx={{ mr: 2, color: 'primary.main', flexShrink: 0 }} />\n        <Box sx={{ flex: 1, minWidth: 0 }}>\n          <Typography variant=\"subtitle2\" noWrap>\n            {option.name}\n          </Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n            Primary: {(option.primary_muscle_groups || []).join(', ') || 'None'}\n          </Typography>\n          {option.supporting_muscle_groups && option.supporting_muscle_groups.length > 0 && (\n            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" noWrap>\n              Supporting: {option.supporting_muscle_groups.join(', ')}\n            </Typography>\n          )}\n        </Box>\n      </Box>\n    </li>\n  );\n\n  return (\n    <Autocomplete\n      options={exercises}\n      getOptionLabel={(option) => option.name || ''}\n      value={selectedExercise}\n      loading={loading}\n      disabled={disabled}\n      onInputChange={(event, newInputValue) => {\n        if (onSearch) {\n          onSearch(newInputValue);\n        }\n      }}\n      onChange={(event, newValue) => {\n        if (onSelect) {\n          onSelect(newValue);\n        }\n      }}\n      renderInput={(params) => (\n        <TextField \n          {...params} \n          label={label}\n          placeholder={placeholder}\n          fullWidth\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </>\n            ),\n          }}\n        />\n      )}\n      renderOption={renderOption}\n      isOptionEqualToValue={(option, value) => option.id === value.id}\n      filterOptions={(x) => x} // Don't filter client-side since we're doing server-side search\n      noOptionsText=\"Type at least 2 characters to search for exercises\"\n      loadingText=\"Searching exercises...\"\n      sx={{ mb: 2 }}\n    />\n  );\n};\n\nexport default ExerciseSearch; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}