{"ast":null,"code":"var _jsxFileName = \"/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/components/profile/sections/GoalsSection.js\";\nimport React from 'react';\nimport { Grid, Typography, TextField, FormControl, InputLabel, Select, MenuItem, OutlinedInput, Chip, Box } from '@mui/material';\nimport InfoTooltip from '../../common/InfoTooltip';\nimport { GOAL_TYPES, VALIDATION_RULES, FIELD_NAMES } from '../../../constants/profileConstants';\n\n/**\n * GoalsSection component for goals form fields\n * @param {Object} formData - Form data object\n * @param {Function} onChange - Change handler for form fields\n * @param {Function} onGoalTypesChange - Special handler for goal types multi-select\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoalsSection = ({\n  formData,\n  onChange,\n  onGoalTypesChange\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: \"primary\",\n        sx: {\n          mt: 2\n        },\n        children: \"Goals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        title: \"Select one or more fitness goals\",\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Goal Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            name: \"goal_types\",\n            value: formData.goals.goal_types,\n            onChange: onGoalTypesChange,\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              label: \"Goal Types\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => /*#__PURE__*/_jsxDEV(Chip, {\n                label: value,\n                size: \"small\"\n              }, value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this),\n            children: GOAL_TYPES.map(goal => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: goal,\n              children: goal.charAt(0).toUpperCase() + goal.slice(1)\n            }, goal, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      children: /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        title: \"Target weight in kilograms (optional)\",\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Target Weight (kg)\",\n          name: FIELD_NAMES.TARGET_WEIGHT,\n          type: \"number\",\n          value: formData.goals.target_weight,\n          onChange: onChange,\n          fullWidth: true,\n          InputProps: {\n            inputProps: {\n              step: VALIDATION_RULES.WEIGHT_STEP,\n              min: 0\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      children: /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        title: \"Target body fat percentage (optional)\",\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Target Body Fat (%)\",\n          name: FIELD_NAMES.TARGET_BODY_FAT,\n          type: \"number\",\n          value: formData.goals.target_body_fat,\n          onChange: onChange,\n          fullWidth: true,\n          InputProps: {\n            inputProps: {\n              step: VALIDATION_RULES.BODY_FAT_STEP,\n              min: 0,\n              max: VALIDATION_RULES.MAX_BODY_FAT\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = GoalsSection;\nexport default GoalsSection;\nvar _c;\n$RefreshReg$(_c, \"GoalsSection\");","map":{"version":3,"names":["React","Grid","Typography","TextField","FormControl","InputLabel","Select","MenuItem","OutlinedInput","Chip","Box","InfoTooltip","GOAL_TYPES","VALIDATION_RULES","FIELD_NAMES","jsxDEV","_jsxDEV","Fragment","_Fragment","GoalsSection","formData","onChange","onGoalTypesChange","children","item","xs","variant","color","sx","mt","fileName","_jsxFileName","lineNumber","columnNumber","title","fullWidth","required","multiple","name","value","goals","goal_types","input","label","renderValue","selected","display","flexWrap","gap","map","size","goal","charAt","toUpperCase","slice","sm","TARGET_WEIGHT","type","target_weight","InputProps","inputProps","step","WEIGHT_STEP","min","TARGET_BODY_FAT","target_body_fat","BODY_FAT_STEP","max","MAX_BODY_FAT","_c","$RefreshReg$"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/components/profile/sections/GoalsSection.js"],"sourcesContent":["import React from 'react';\nimport { \n  Grid, \n  Typography, \n  TextField, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem,\n  OutlinedInput,\n  Chip,\n  Box\n} from '@mui/material';\nimport InfoTooltip from '../../common/InfoTooltip';\nimport { GOAL_TYPES, VALIDATION_RULES, FIELD_NAMES } from '../../../constants/profileConstants';\n\n/**\n * GoalsSection component for goals form fields\n * @param {Object} formData - Form data object\n * @param {Function} onChange - Change handler for form fields\n * @param {Function} onGoalTypesChange - Special handler for goal types multi-select\n */\nconst GoalsSection = ({ formData, onChange, onGoalTypesChange }) => {\n  return (\n    <>\n      {/* Section Header */}\n      <Grid item xs={12}>\n        <Typography variant=\"h6\" color=\"primary\" sx={{ mt: 2 }}>Goals</Typography>\n      </Grid>\n      \n      {/* Goal Types Multi-Select */}\n      <Grid item xs={12}>\n        <InfoTooltip title=\"Select one or more fitness goals\">\n          <FormControl fullWidth required>\n            <InputLabel>Goal Types</InputLabel>\n            <Select\n              multiple\n              name=\"goal_types\"\n              value={formData.goals.goal_types}\n              onChange={onGoalTypesChange}\n              input={<OutlinedInput label=\"Goal Types\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} size=\"small\" />\n                  ))}\n                </Box>\n              )}\n            >\n              {GOAL_TYPES.map((goal) => (\n                <MenuItem key={goal} value={goal}>\n                  {goal.charAt(0).toUpperCase() + goal.slice(1)}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </InfoTooltip>\n      </Grid>\n      \n      {/* Target Weight Field */}\n      <Grid item xs={12} sm={6}>\n        <InfoTooltip title=\"Target weight in kilograms (optional)\">\n          <TextField \n            label=\"Target Weight (kg)\" \n            name={FIELD_NAMES.TARGET_WEIGHT}\n            type=\"number\" \n            value={formData.goals.target_weight} \n            onChange={onChange} \n            fullWidth \n            InputProps={{ \n              inputProps: { \n                step: VALIDATION_RULES.WEIGHT_STEP, \n                min: 0 \n              } \n            }}\n          />\n        </InfoTooltip>\n      </Grid>\n      \n      {/* Target Body Fat Field */}\n      <Grid item xs={12} sm={6}>\n        <InfoTooltip title=\"Target body fat percentage (optional)\">\n          <TextField \n            label=\"Target Body Fat (%)\" \n            name={FIELD_NAMES.TARGET_BODY_FAT}\n            type=\"number\" \n            value={formData.goals.target_body_fat} \n            onChange={onChange} \n            fullWidth \n            InputProps={{ \n              inputProps: { \n                step: VALIDATION_RULES.BODY_FAT_STEP, \n                min: 0, \n                max: VALIDATION_RULES.MAX_BODY_FAT \n              } \n            }}\n          />\n        </InfoTooltip>\n      </Grid>\n    </>\n  );\n};\n\nexport default GoalsSection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}