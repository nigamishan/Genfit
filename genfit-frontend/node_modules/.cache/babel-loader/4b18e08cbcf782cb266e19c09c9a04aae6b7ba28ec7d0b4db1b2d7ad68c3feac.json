{"ast":null,"code":"// Progress tracking constants and configurations\n\n// Corrected metric types focused on fitness goals (matching backend API)\nexport const METRIC_TYPES = {\n  WEIGHT: 'weight',\n  BODY_FAT_PERCENTAGE: 'body_fat',\n  DEADLIFT_PR: 'pr_deadlift',\n  SQUAT_PR: 'pr_squat',\n  BENCH_PRESS_PR: 'pr_bench'\n};\n\n// Available metric types array for forms and filters\nexport const AVAILABLE_METRIC_TYPES = [METRIC_TYPES.WEIGHT, METRIC_TYPES.BODY_FAT_PERCENTAGE, METRIC_TYPES.DEADLIFT_PR, METRIC_TYPES.SQUAT_PR, METRIC_TYPES.BENCH_PRESS_PR];\n\n// Units for each metric type\nexport const METRIC_UNITS = {\n  [METRIC_TYPES.WEIGHT]: 'kg',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: '%',\n  [METRIC_TYPES.DEADLIFT_PR]: 'kg',\n  [METRIC_TYPES.SQUAT_PR]: 'kg',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'kg'\n};\n\n// Display names for metric types\nexport const METRIC_DISPLAY_NAMES = {\n  [METRIC_TYPES.WEIGHT]: 'Weight',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: 'Body Fat %',\n  [METRIC_TYPES.DEADLIFT_PR]: 'Deadlift PR',\n  [METRIC_TYPES.SQUAT_PR]: 'Squat PR',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'Bench PR'\n};\n\n// Chart colors for different metrics\nexport const CHART_COLORS = {\n  [METRIC_TYPES.WEIGHT]: 'rgb(75, 192, 192)',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: 'rgb(255, 99, 132)',\n  [METRIC_TYPES.DEADLIFT_PR]: 'rgb(54, 162, 235)',\n  [METRIC_TYPES.SQUAT_PR]: 'rgb(255, 205, 86)',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'rgb(153, 102, 255)'\n};\n\n// Days of the week for workout volume\nexport const WORKOUT_DAYS = [{\n  number: 1,\n  name: 'Monday',\n  short: 'Mon'\n}, {\n  number: 2,\n  name: 'Tuesday',\n  short: 'Tue'\n}, {\n  number: 3,\n  name: 'Wednesday',\n  short: 'Wed'\n}, {\n  number: 4,\n  name: 'Thursday',\n  short: 'Thu'\n}, {\n  number: 5,\n  name: 'Friday',\n  short: 'Fri'\n}, {\n  number: 6,\n  name: 'Saturday',\n  short: 'Sat'\n}, {\n  number: 7,\n  name: 'Sunday',\n  short: 'Sun'\n}];\n\n// Default filter settings\nexport const DEFAULT_FILTERS = {\n  metric_types: [],\n  start_date: null,\n  end_date: null,\n  sort_order: 'desc',\n  limit: 50\n};\n\n// Progress form field names\nexport const PROGRESS_FIELD_NAMES = {\n  METRIC_TYPE: 'metric_type',\n  VALUE: 'value',\n  UNIT: 'unit',\n  RECORDED_AT: 'recorded_at',\n  NOTES: 'notes'\n};","map":{"version":3,"names":["METRIC_TYPES","WEIGHT","BODY_FAT_PERCENTAGE","DEADLIFT_PR","SQUAT_PR","BENCH_PRESS_PR","AVAILABLE_METRIC_TYPES","METRIC_UNITS","METRIC_DISPLAY_NAMES","CHART_COLORS","WORKOUT_DAYS","number","name","short","DEFAULT_FILTERS","metric_types","start_date","end_date","sort_order","limit","PROGRESS_FIELD_NAMES","METRIC_TYPE","VALUE","UNIT","RECORDED_AT","NOTES"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/constants/progressConstants.js"],"sourcesContent":["// Progress tracking constants and configurations\n\n// Corrected metric types focused on fitness goals (matching backend API)\nexport const METRIC_TYPES = {\n  WEIGHT: 'weight',\n  BODY_FAT_PERCENTAGE: 'body_fat',\n  DEADLIFT_PR: 'pr_deadlift',\n  SQUAT_PR: 'pr_squat',\n  BENCH_PRESS_PR: 'pr_bench'\n};\n\n// Available metric types array for forms and filters\nexport const AVAILABLE_METRIC_TYPES = [\n  METRIC_TYPES.WEIGHT,\n  METRIC_TYPES.BODY_FAT_PERCENTAGE,\n  METRIC_TYPES.DEADLIFT_PR,\n  METRIC_TYPES.SQUAT_PR,\n  METRIC_TYPES.BENCH_PRESS_PR\n];\n\n// Units for each metric type\nexport const METRIC_UNITS = {\n  [METRIC_TYPES.WEIGHT]: 'kg',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: '%',\n  [METRIC_TYPES.DEADLIFT_PR]: 'kg',\n  [METRIC_TYPES.SQUAT_PR]: 'kg',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'kg'\n};\n\n// Display names for metric types\nexport const METRIC_DISPLAY_NAMES = {\n  [METRIC_TYPES.WEIGHT]: 'Weight',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: 'Body Fat %',\n  [METRIC_TYPES.DEADLIFT_PR]: 'Deadlift PR',\n  [METRIC_TYPES.SQUAT_PR]: 'Squat PR',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'Bench PR'\n};\n\n// Chart colors for different metrics\nexport const CHART_COLORS = {\n  [METRIC_TYPES.WEIGHT]: 'rgb(75, 192, 192)',\n  [METRIC_TYPES.BODY_FAT_PERCENTAGE]: 'rgb(255, 99, 132)',\n  [METRIC_TYPES.DEADLIFT_PR]: 'rgb(54, 162, 235)',\n  [METRIC_TYPES.SQUAT_PR]: 'rgb(255, 205, 86)',\n  [METRIC_TYPES.BENCH_PRESS_PR]: 'rgb(153, 102, 255)'\n};\n\n// Days of the week for workout volume\nexport const WORKOUT_DAYS = [\n  { number: 1, name: 'Monday', short: 'Mon' },\n  { number: 2, name: 'Tuesday', short: 'Tue' },\n  { number: 3, name: 'Wednesday', short: 'Wed' },\n  { number: 4, name: 'Thursday', short: 'Thu' },\n  { number: 5, name: 'Friday', short: 'Fri' },\n  { number: 6, name: 'Saturday', short: 'Sat' },\n  { number: 7, name: 'Sunday', short: 'Sun' }\n];\n\n// Default filter settings\nexport const DEFAULT_FILTERS = {\n  metric_types: [],\n  start_date: null,\n  end_date: null,\n  sort_order: 'desc',\n  limit: 50\n};\n\n// Progress form field names\nexport const PROGRESS_FIELD_NAMES = {\n  METRIC_TYPE: 'metric_type',\n  VALUE: 'value',\n  UNIT: 'unit',\n  RECORDED_AT: 'recorded_at',\n  NOTES: 'notes'\n}; "],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG;EAC1BC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,UAAU;EAC/BC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,cAAc,EAAE;AAClB,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAG,CACpCN,YAAY,CAACC,MAAM,EACnBD,YAAY,CAACE,mBAAmB,EAChCF,YAAY,CAACG,WAAW,EACxBH,YAAY,CAACI,QAAQ,EACrBJ,YAAY,CAACK,cAAc,CAC5B;;AAED;AACA,OAAO,MAAME,YAAY,GAAG;EAC1B,CAACP,YAAY,CAACC,MAAM,GAAG,IAAI;EAC3B,CAACD,YAAY,CAACE,mBAAmB,GAAG,GAAG;EACvC,CAACF,YAAY,CAACG,WAAW,GAAG,IAAI;EAChC,CAACH,YAAY,CAACI,QAAQ,GAAG,IAAI;EAC7B,CAACJ,YAAY,CAACK,cAAc,GAAG;AACjC,CAAC;;AAED;AACA,OAAO,MAAMG,oBAAoB,GAAG;EAClC,CAACR,YAAY,CAACC,MAAM,GAAG,QAAQ;EAC/B,CAACD,YAAY,CAACE,mBAAmB,GAAG,YAAY;EAChD,CAACF,YAAY,CAACG,WAAW,GAAG,aAAa;EACzC,CAACH,YAAY,CAACI,QAAQ,GAAG,UAAU;EACnC,CAACJ,YAAY,CAACK,cAAc,GAAG;AACjC,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAG;EAC1B,CAACT,YAAY,CAACC,MAAM,GAAG,mBAAmB;EAC1C,CAACD,YAAY,CAACE,mBAAmB,GAAG,mBAAmB;EACvD,CAACF,YAAY,CAACG,WAAW,GAAG,mBAAmB;EAC/C,CAACH,YAAY,CAACI,QAAQ,GAAG,mBAAmB;EAC5C,CAACJ,YAAY,CAACK,cAAc,GAAG;AACjC,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG,CAC1B;EAAEC,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC3C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC5C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC9C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC7C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC3C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAM,CAAC,EAC7C;EAAEF,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAM,CAAC,CAC5C;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,YAAY,EAAE,EAAE;EAChBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAG;EAClCC,WAAW,EAAE,aAAa;EAC1BC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,aAAa;EAC1BC,KAAK,EAAE;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}