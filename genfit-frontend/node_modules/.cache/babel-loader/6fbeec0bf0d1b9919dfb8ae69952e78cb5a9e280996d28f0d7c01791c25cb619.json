{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport dayjs from 'dayjs';\nimport { getMyProgress, logProgress, deleteProgressEntry, getMyProgressSummary, getMyProgressTrend, getWorkoutVolume } from '../api';\nimport { DEFAULT_FILTERS, METRIC_TYPES } from '../constants/progressConstants';\nimport { createEmptyProgressEntry, validateProgressEntry, getMetricUnit } from '../utils/progressUtils';\n\n/**\n * Custom hook for managing progress data and operations\n */\nexport const useProgress = () => {\n  _s();\n  // Progress data state\n  const [progressEntries, setProgressEntries] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [trends, setTrends] = useState(null);\n  const [workoutVolume, setWorkoutVolume] = useState(null);\n\n  // UI state\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Form and filter state\n  const [filters, setFilters] = useState(DEFAULT_FILTERS);\n  const [newEntry, setNewEntry] = useState(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [deleteConfirm, setDeleteConfirm] = useState({\n    open: false,\n    entryId: null\n  });\n\n  // Fetch progress entries with filters\n  const fetchProgressData = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const params = {};\n\n      // Add metric types as array\n      if (filters.metric_types.length > 0) {\n        params.metric_types = filters.metric_types;\n      }\n\n      // Add other filter parameters\n      if (filters.start_date) {\n        params.start_date = filters.start_date.toISOString();\n      }\n      if (filters.end_date) {\n        params.end_date = filters.end_date.toISOString();\n      }\n      params.sort_order = filters.sort_order;\n      params.limit = filters.limit;\n      const {\n        data\n      } = await getMyProgress(params);\n      setProgressEntries(data.entries || []);\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch progress entries.');\n      if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        // Handle authentication error\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setLoading(false);\n  }, [filters]);\n\n  // Fetch progress summary\n  const fetchSummary = useCallback(async () => {\n    try {\n      const params = {};\n\n      // Add metric types as array for summary\n      if (filters.metric_types.length > 0) {\n        params.metric_types = filters.metric_types;\n      }\n      const {\n        data\n      } = await getMyProgressSummary(params);\n      setSummary(data.summary || {});\n    } catch (err) {\n      var _err$response3, _err$response3$data, _err$response4;\n      console.error(\"Failed to fetch summary:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message);\n      if (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch progress trends\n  const fetchTrends = useCallback(async () => {\n    try {\n      const params = {};\n\n      // Add metric types as array for trends\n      const metricTypes = filters.metric_types.length > 0 ? filters.metric_types : Object.values(METRIC_TYPES);\n      params.metric_types = metricTypes;\n      const {\n        data\n      } = await getMyProgressTrend(params);\n      setTrends(data.trends || {});\n    } catch (err) {\n      var _err$response5, _err$response5$data, _err$response6;\n      console.error(\"Failed to fetch trends:\", ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || err.message);\n      if (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : _err$response6.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch workout volume data\n  const fetchWorkoutVolume = useCallback(async () => {\n    try {\n      const {\n        data\n      } = await getWorkoutVolume();\n      setWorkoutVolume(data);\n    } catch (err) {\n      var _err$response7, _err$response7$data, _err$response8;\n      console.error(\"Failed to fetch workout volume:\", ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || err.message);\n      if (((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : _err$response8.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchProgressData();\n    fetchSummary();\n    fetchTrends();\n    fetchWorkoutVolume();\n  }, [fetchProgressData, fetchSummary, fetchTrends, fetchWorkoutVolume]);\n\n  // Auto-apply filters when they change (except on initial load)\n  useEffect(() => {\n    // Skip on initial load when all filters are default\n    const isInitialState = filters.metric_types.length === 0 && !filters.start_date && !filters.end_date && filters.sort_order === 'desc';\n    if (!isInitialState) {\n      fetchProgressData();\n      fetchTrends();\n    }\n  }, [filters, fetchProgressData, fetchTrends]);\n\n  // Filter handlers\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilters(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = (name, date) => {\n    setFilters(prev => ({\n      ...prev,\n      [name]: date\n    }));\n  };\n  const applyFilters = () => {\n    // Force a re-fetch by triggering the useEffect dependency\n    setLoading(true);\n    // Use a small delay to ensure state is updated\n    setTimeout(() => {\n      fetchProgressData();\n      fetchTrends();\n    }, 50);\n  };\n  const resetFilters = () => {\n    setFilters(DEFAULT_FILTERS);\n  };\n\n  // Form handlers\n  const handleNewEntryChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    let updatedEntry = {\n      ...newEntry,\n      [name]: value\n    };\n\n    // Update unit when metric type changes\n    if (name === 'metric_type') {\n      updatedEntry.unit = getMetricUnit(value);\n    }\n    setNewEntry(updatedEntry);\n  };\n  const handleNewEntryDateChange = date => {\n    setNewEntry(prev => ({\n      ...prev,\n      recorded_at: date\n    }));\n  };\n  const toggleAddForm = () => {\n    setShowAddForm(!showAddForm);\n    if (!showAddForm) {\n      // Reset form when opening\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  // CRUD operations\n  const addProgressEntry = async e => {\n    e.preventDefault();\n\n    // Validate entry\n    const validation = validateProgressEntry(newEntry);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    try {\n      const payload = {\n        ...newEntry,\n        value: parseFloat(newEntry.value),\n        recorded_at: newEntry.recorded_at.toISOString()\n      };\n      await logProgress(payload);\n      setSuccess('Progress entry added successfully!');\n      setShowAddForm(false);\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n\n      // Refresh all data\n      await Promise.all([fetchProgressData(), fetchSummary(), fetchTrends()]);\n    } catch (err) {\n      var _err$response9, _err$response9$data, _err$response0;\n      setError(((_err$response9 = err.response) === null || _err$response9 === void 0 ? void 0 : (_err$response9$data = _err$response9.data) === null || _err$response9$data === void 0 ? void 0 : _err$response9$data.message) || 'Failed to add progress entry.');\n      if (((_err$response0 = err.response) === null || _err$response0 === void 0 ? void 0 : _err$response0.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setSubmitting(false);\n  };\n  const openDeleteConfirm = entryId => {\n    setDeleteConfirm({\n      open: true,\n      entryId\n    });\n  };\n  const closeDeleteConfirm = () => {\n    setDeleteConfirm({\n      open: false,\n      entryId: null\n    });\n  };\n  const deleteEntry = async () => {\n    if (!deleteConfirm.entryId) return;\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    try {\n      await deleteProgressEntry(deleteConfirm.entryId);\n      setSuccess('Progress entry deleted successfully!');\n\n      // Refresh all data\n      await Promise.all([fetchProgressData(), fetchSummary(), fetchTrends()]);\n    } catch (err) {\n      var _err$response1, _err$response1$data, _err$response10;\n      setError(((_err$response1 = err.response) === null || _err$response1 === void 0 ? void 0 : (_err$response1$data = _err$response1.data) === null || _err$response1$data === void 0 ? void 0 : _err$response1$data.message) || 'Failed to delete progress entry.');\n      if (((_err$response10 = err.response) === null || _err$response10 === void 0 ? void 0 : _err$response10.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    closeDeleteConfirm();\n    setSubmitting(false);\n  };\n\n  // Clear messages\n  const clearMessages = () => {\n    setError('');\n    setSuccess('');\n  };\n  return {\n    // Data\n    progressEntries,\n    summary,\n    trends,\n    workoutVolume,\n    // UI State\n    loading,\n    submitting,\n    error,\n    success,\n    // Form State\n    filters,\n    newEntry,\n    showAddForm,\n    deleteConfirm,\n    // Handlers\n    handleFilterChange,\n    handleDateChange,\n    applyFilters,\n    resetFilters,\n    handleNewEntryChange,\n    handleNewEntryDateChange,\n    toggleAddForm,\n    addProgressEntry,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    deleteEntry,\n    clearMessages,\n    // Manual refresh functions\n    refreshData: () => {\n      fetchProgressData();\n      fetchSummary();\n      fetchTrends();\n      fetchWorkoutVolume();\n    },\n    refreshProgressData: fetchProgressData,\n    refreshSummary: fetchSummary,\n    refreshTrends: fetchTrends,\n    refreshWorkoutVolume: fetchWorkoutVolume\n  };\n};\n_s(useProgress, \"+dlpO10zwU2XjD8oJ8L9Nc38hJw=\");","map":{"version":3,"names":["useState","useEffect","useCallback","dayjs","getMyProgress","logProgress","deleteProgressEntry","getMyProgressSummary","getMyProgressTrend","getWorkoutVolume","DEFAULT_FILTERS","METRIC_TYPES","createEmptyProgressEntry","validateProgressEntry","getMetricUnit","useProgress","_s","progressEntries","setProgressEntries","summary","setSummary","trends","setTrends","workoutVolume","setWorkoutVolume","loading","setLoading","submitting","setSubmitting","error","setError","success","setSuccess","filters","setFilters","newEntry","setNewEntry","WEIGHT","showAddForm","setShowAddForm","deleteConfirm","setDeleteConfirm","open","entryId","fetchProgressData","params","metric_types","length","start_date","toISOString","end_date","sort_order","limit","data","entries","err","_err$response","_err$response$data","_err$response2","response","message","status","localStorage","removeItem","window","location","href","fetchSummary","_err$response3","_err$response3$data","_err$response4","console","fetchTrends","metricTypes","Object","values","_err$response5","_err$response5$data","_err$response6","fetchWorkoutVolume","_err$response7","_err$response7$data","_err$response8","isInitialState","handleFilterChange","e","name","value","target","prev","handleDateChange","date","applyFilters","setTimeout","resetFilters","handleNewEntryChange","updatedEntry","unit","handleNewEntryDateChange","recorded_at","toggleAddForm","addProgressEntry","preventDefault","validation","isValid","payload","parseFloat","Promise","all","_err$response9","_err$response9$data","_err$response0","openDeleteConfirm","closeDeleteConfirm","deleteEntry","_err$response1","_err$response1$data","_err$response10","clearMessages","refreshData","refreshProgressData","refreshSummary","refreshTrends","refreshWorkoutVolume"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/hooks/useProgress.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport dayjs from 'dayjs';\nimport { \n  getMyProgress, \n  logProgress, \n  deleteProgressEntry, \n  getMyProgressSummary, \n  getMyProgressTrend,\n  getWorkoutVolume \n} from '../api';\nimport { \n  DEFAULT_FILTERS, \n  METRIC_TYPES \n} from '../constants/progressConstants';\nimport { \n  createEmptyProgressEntry, \n  validateProgressEntry,\n  getMetricUnit \n} from '../utils/progressUtils';\n\n/**\n * Custom hook for managing progress data and operations\n */\nexport const useProgress = () => {\n  // Progress data state\n  const [progressEntries, setProgressEntries] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [trends, setTrends] = useState(null);\n  const [workoutVolume, setWorkoutVolume] = useState(null);\n  \n  // UI state\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  \n  // Form and filter state\n  const [filters, setFilters] = useState(DEFAULT_FILTERS);\n  const [newEntry, setNewEntry] = useState(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [deleteConfirm, setDeleteConfirm] = useState({ open: false, entryId: null });\n\n  // Fetch progress entries with filters\n  const fetchProgressData = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const params = {};\n      \n      // Add metric types as array\n      if (filters.metric_types.length > 0) {\n        params.metric_types = filters.metric_types;\n      }\n      \n      // Add other filter parameters\n      if (filters.start_date) {\n        params.start_date = filters.start_date.toISOString();\n      }\n      if (filters.end_date) {\n        params.end_date = filters.end_date.toISOString();\n      }\n      params.sort_order = filters.sort_order;\n      params.limit = filters.limit;\n      \n      const { data } = await getMyProgress(params);\n      setProgressEntries(data.entries || []);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to fetch progress entries.');\n      if (err.response?.status === 401) {\n        // Handle authentication error\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setLoading(false);\n  }, [filters]);\n\n  // Fetch progress summary\n  const fetchSummary = useCallback(async () => {\n    try {\n      const params = {};\n      \n      // Add metric types as array for summary\n      if (filters.metric_types.length > 0) {\n        params.metric_types = filters.metric_types;\n      }\n      \n      const { data } = await getMyProgressSummary(params);\n      setSummary(data.summary || {});\n    } catch (err) {\n      console.error(\"Failed to fetch summary:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch progress trends\n  const fetchTrends = useCallback(async () => {\n    try {\n      const params = {};\n      \n      // Add metric types as array for trends\n      const metricTypes = filters.metric_types.length > 0 \n        ? filters.metric_types \n        : Object.values(METRIC_TYPES);\n      \n      params.metric_types = metricTypes;\n      \n      const { data } = await getMyProgressTrend(params);\n      setTrends(data.trends || {});\n    } catch (err) {\n      console.error(\"Failed to fetch trends:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch workout volume data\n  const fetchWorkoutVolume = useCallback(async () => {\n    try {\n      const { data } = await getWorkoutVolume();\n      setWorkoutVolume(data);\n    } catch (err) {\n      console.error(\"Failed to fetch workout volume:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchProgressData();\n    fetchSummary();\n    fetchTrends();\n    fetchWorkoutVolume();\n  }, [fetchProgressData, fetchSummary, fetchTrends, fetchWorkoutVolume]);\n\n  // Auto-apply filters when they change (except on initial load)\n  useEffect(() => {\n    // Skip on initial load when all filters are default\n    const isInitialState = \n      filters.metric_types.length === 0 && \n      !filters.start_date && \n      !filters.end_date && \n      filters.sort_order === 'desc';\n    \n    if (!isInitialState) {\n      fetchProgressData();\n      fetchTrends();\n    }\n  }, [filters, fetchProgressData, fetchTrends]);\n\n  // Filter handlers\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilters(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleDateChange = (name, date) => {\n    setFilters(prev => ({ ...prev, [name]: date }));\n  };\n\n  const applyFilters = () => {\n    // Force a re-fetch by triggering the useEffect dependency\n    setLoading(true);\n    // Use a small delay to ensure state is updated\n    setTimeout(() => {\n      fetchProgressData();\n      fetchTrends();\n    }, 50);\n  };\n\n  const resetFilters = () => {\n    setFilters(DEFAULT_FILTERS);\n  };\n\n  // Form handlers\n  const handleNewEntryChange = (e) => {\n    const { name, value } = e.target;\n    let updatedEntry = { ...newEntry, [name]: value };\n    \n    // Update unit when metric type changes\n    if (name === 'metric_type') {\n      updatedEntry.unit = getMetricUnit(value);\n    }\n    \n    setNewEntry(updatedEntry);\n  };\n\n  const handleNewEntryDateChange = (date) => {\n    setNewEntry(prev => ({ ...prev, recorded_at: date }));\n  };\n\n  const toggleAddForm = () => {\n    setShowAddForm(!showAddForm);\n    if (!showAddForm) {\n      // Reset form when opening\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  // CRUD operations\n  const addProgressEntry = async (e) => {\n    e.preventDefault();\n    \n    // Validate entry\n    const validation = validateProgressEntry(newEntry);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const payload = {\n        ...newEntry,\n        value: parseFloat(newEntry.value),\n        recorded_at: newEntry.recorded_at.toISOString(),\n      };\n      \n      await logProgress(payload);\n      setSuccess('Progress entry added successfully!');\n      setShowAddForm(false);\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      \n      // Refresh all data\n      await Promise.all([\n        fetchProgressData(),\n        fetchSummary(),\n        fetchTrends()\n      ]);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to add progress entry.');\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setSubmitting(false);\n  };\n\n  const openDeleteConfirm = (entryId) => {\n    setDeleteConfirm({ open: true, entryId });\n  };\n\n  const closeDeleteConfirm = () => {\n    setDeleteConfirm({ open: false, entryId: null });\n  };\n\n  const deleteEntry = async () => {\n    if (!deleteConfirm.entryId) return;\n\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      await deleteProgressEntry(deleteConfirm.entryId);\n      setSuccess('Progress entry deleted successfully!');\n      \n      // Refresh all data\n      await Promise.all([\n        fetchProgressData(),\n        fetchSummary(),\n        fetchTrends()\n      ]);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to delete progress entry.');\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    \n    closeDeleteConfirm();\n    setSubmitting(false);\n  };\n\n  // Clear messages\n  const clearMessages = () => {\n    setError('');\n    setSuccess('');\n  };\n\n  return {\n    // Data\n    progressEntries,\n    summary,\n    trends,\n    workoutVolume,\n    \n    // UI State\n    loading,\n    submitting,\n    error,\n    success,\n    \n    // Form State\n    filters,\n    newEntry,\n    showAddForm,\n    deleteConfirm,\n    \n    // Handlers\n    handleFilterChange,\n    handleDateChange,\n    applyFilters,\n    resetFilters,\n    handleNewEntryChange,\n    handleNewEntryDateChange,\n    toggleAddForm,\n    addProgressEntry,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    deleteEntry,\n    clearMessages,\n    \n    // Manual refresh functions\n    refreshData: () => {\n      fetchProgressData();\n      fetchSummary();\n      fetchTrends();\n      fetchWorkoutVolume();\n    },\n    refreshProgressData: fetchProgressData,\n    refreshSummary: fetchSummary,\n    refreshTrends: fetchTrends,\n    refreshWorkoutVolume: fetchWorkoutVolume\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}