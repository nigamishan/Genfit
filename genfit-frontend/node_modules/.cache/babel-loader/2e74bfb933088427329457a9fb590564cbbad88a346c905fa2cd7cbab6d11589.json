{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getMyWorkoutPlan, updateMyWorkoutPlan, deleteMyWorkoutPlan, searchExercises, createWorkoutPlan } from '../api';\nimport { createEmptyPlan, createEmptyWorkout, createEmptySetDetail, groupWorkoutsByDay, getAllDaysWithWorkouts, cleanPlanForSaving, validateWorkoutPlan, getExerciseMuscleGroups } from '../utils/workoutUtils';\n\n/**\n * Custom hook for managing workout plan data and operations\n * @returns {Object} Workout state and handlers\n */\nexport const useWorkout = () => {\n  _s();\n  // Core state\n  const [plan, setPlan] = useState(null);\n  const [editablePlan, setEditablePlan] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n\n  // Exercise search state\n  const [exerciseSearchResults, setExerciseSearchResults] = useState([]);\n  const [searchLoading, setSearchLoading] = useState(false);\n\n  // UI state\n  const [currentDayTab, setCurrentDayTab] = useState(0);\n  const navigate = useNavigate();\n\n  /**\n   * Fetch workout plan from API\n   */\n  const fetchPlan = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const {\n        data\n      } = await getMyWorkoutPlan();\n      setPlan(data);\n      setEditablePlan(JSON.parse(JSON.stringify(data))); // Deep copy for editing\n    } catch (err) {\n      if (err.response && err.response.status === 404) {\n        setPlan(null);\n        setEditablePlan(null);\n        setError('No workout plan found. You can create one.');\n      } else {\n        var _err$response, _err$response$data, _err$response2;\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch workout plan.');\n\n        // Handle authentication errors\n        if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n          localStorage.removeItem('genfitAuth');\n          navigate('/login', {\n            state: {\n              from: {\n                pathname: '/workout'\n              }\n            }\n          });\n        }\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Search for exercises\n   */\n  const searchForExercises = useCallback(async query => {\n    if (query && query.length >= 2) {\n      setSearchLoading(true);\n      try {\n        const {\n          data\n        } = await searchExercises(query);\n        setExerciseSearchResults(data.exercises || []);\n      } catch (searchErr) {\n        console.error('Exercise search failed:', searchErr);\n        setExerciseSearchResults([]);\n      } finally {\n        setSearchLoading(false);\n      }\n    } else {\n      setExerciseSearchResults([]);\n    }\n  }, []);\n\n  /**\n   * Handle plan basic info changes (name, description)\n   */\n  const handlePlanInfoChange = useCallback((field, value) => {\n    setEditablePlan(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  /**\n   * Handle workout field changes\n   */\n  const handleWorkoutChange = useCallback((workoutIndex, field, value) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      updatedWorkouts[workoutIndex] = {\n        ...updatedWorkouts[workoutIndex],\n        [field]: value\n      };\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, []);\n\n  /**\n   * Handle set detail changes\n   */\n  const handleSetDetailChange = useCallback((workoutIndex, setIndex, field, value) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      const updatedSetDetails = [...updatedWorkouts[workoutIndex].set_details];\n      updatedSetDetails[setIndex] = {\n        ...updatedSetDetails[setIndex],\n        [field]: value\n      };\n      updatedWorkouts[workoutIndex] = {\n        ...updatedWorkouts[workoutIndex],\n        set_details: updatedSetDetails\n      };\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, []);\n\n  /**\n   * Add a new workout to a specific day\n   */\n  const addWorkoutToDay = useCallback(day => {\n    setEditablePlan(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, createEmptyWorkout(day)]\n    }));\n  }, []);\n\n  /**\n   * Remove a workout\n   */\n  const removeWorkout = useCallback(workoutIndex => {\n    setEditablePlan(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter((_, index) => index !== workoutIndex)\n    }));\n  }, []);\n\n  /**\n   * Add a set to a workout\n   */\n  const addSetToWorkout = useCallback(workoutIndex => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      const newSetNumber = updatedWorkouts[workoutIndex].set_details.length + 1;\n      updatedWorkouts[workoutIndex].set_details = [...updatedWorkouts[workoutIndex].set_details, createEmptySetDetail(newSetNumber)];\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, []);\n\n  /**\n   * Remove a set from a workout\n   */\n  const removeSetFromWorkout = useCallback((workoutIndex, setIndex) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      updatedWorkouts[workoutIndex].set_details = updatedWorkouts[workoutIndex].set_details.filter((_, sIdx) => sIdx !== setIndex).map((set, idx) => ({\n        ...set,\n        set_number: idx + 1\n      })); // Renumber sets\n\n      return {\n        ...prev,\n        workouts: updatedWorkouts\n      };\n    });\n  }, []);\n\n  /**\n   * Select an exercise from search results\n   */\n  const selectExercise = useCallback((workoutIndex, exercise) => {\n    if (exercise) {\n      // Use the utility function to get muscles with fallback\n      const musclesTargeted = getExerciseMuscleGroups(exercise);\n      setEditablePlan(prev => {\n        const updatedWorkouts = [...prev.workouts];\n        updatedWorkouts[workoutIndex] = {\n          ...updatedWorkouts[workoutIndex],\n          name: exercise.name,\n          exercise_id: exercise.id,\n          muscles_targeted: musclesTargeted\n        };\n        return {\n          ...prev,\n          workouts: updatedWorkouts\n        };\n      });\n    }\n  }, []);\n\n  /**\n   * Save workout plan changes\n   */\n  const savePlan = useCallback(async () => {\n    if (!editablePlan) return;\n\n    // Validate plan\n    const validation = validateWorkoutPlan(editablePlan);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const planToSave = cleanPlanForSaving(editablePlan);\n      if (plan && plan.id) {\n        // Update existing plan\n        await updateMyWorkoutPlan(planToSave);\n        setSuccess('Workout plan updated successfully!');\n      } else {\n        // Create new plan\n        await createWorkoutPlan(planToSave);\n        setSuccess('Workout plan created successfully!');\n      }\n      await fetchPlan(); // Refetch to get latest version\n      setIsEditing(false);\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to save workout plan.');\n    } finally {\n      setLoading(false);\n    }\n  }, [editablePlan, plan, fetchPlan]);\n\n  /**\n   * Delete workout plan\n   */\n  const deletePlan = useCallback(async () => {\n    setDeleteConfirmOpen(false);\n    if (!plan || !plan.id) return;\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      await deleteMyWorkoutPlan();\n      setSuccess('Workout plan deleted successfully!');\n      setPlan(null);\n      setEditablePlan(null);\n      setIsEditing(false);\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to delete workout plan.');\n    } finally {\n      setLoading(false);\n    }\n  }, [plan]);\n\n  /**\n   * Start creating a new plan\n   */\n  const createNewPlan = useCallback(() => {\n    const newPlan = createEmptyPlan();\n    setPlan({\n      id: null,\n      ...newPlan\n    }); // Temporarily set plan to enable editing UI\n    setEditablePlan(JSON.parse(JSON.stringify(newPlan)));\n    setIsEditing(true);\n    setError(''); // Clear previous \"No plan found\" error\n  }, []);\n\n  /**\n   * Start editing existing plan\n   */\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n    setError('');\n    setSuccess('');\n  }, []);\n\n  /**\n   * Cancel editing\n   */\n  const cancelEditing = useCallback(() => {\n    setIsEditing(false);\n    if (plan && plan.id) {\n      setEditablePlan(JSON.parse(JSON.stringify(plan))); // Reset to original plan\n    } else {\n      setEditablePlan(null); // No existing plan, clear editable form\n      setError('No workout plan found. You can create one.'); // Reshow error\n    }\n    setError('');\n    setSuccess('');\n  }, [plan]);\n\n  /**\n   * Open delete confirmation dialog\n   */\n  const openDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  /**\n   * Close delete confirmation dialog\n   */\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(false);\n  }, []);\n\n  // Derived state\n  const displayedPlan = isEditing ? editablePlan : plan;\n  const groupedWorkouts = displayedPlan ? groupWorkoutsByDay(displayedPlan.workouts) : {};\n  const allDaysWorkouts = getAllDaysWithWorkouts(groupedWorkouts);\n\n  // Fetch plan on mount\n  useEffect(() => {\n    fetchPlan();\n  }, [fetchPlan]);\n  return {\n    // State\n    plan,\n    editablePlan,\n    loading,\n    error,\n    success,\n    isEditing,\n    deleteConfirmOpen,\n    exerciseSearchResults,\n    searchLoading,\n    currentDayTab,\n    // Derived state\n    displayedPlan,\n    groupedWorkouts,\n    allDaysWorkouts,\n    // Handlers\n    handlePlanInfoChange,\n    handleWorkoutChange,\n    handleSetDetailChange,\n    addWorkoutToDay,\n    removeWorkout,\n    addSetToWorkout,\n    removeSetFromWorkout,\n    selectExercise,\n    searchForExercises,\n    savePlan,\n    deletePlan,\n    createNewPlan,\n    startEditing,\n    cancelEditing,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    setCurrentDayTab,\n    // Utilities\n    refetchPlan: fetchPlan\n  };\n};\n_s(useWorkout, \"BLB7j017tzQAl5CPTWzCEUGUCqc=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","getMyWorkoutPlan","updateMyWorkoutPlan","deleteMyWorkoutPlan","searchExercises","createWorkoutPlan","createEmptyPlan","createEmptyWorkout","createEmptySetDetail","groupWorkoutsByDay","getAllDaysWithWorkouts","cleanPlanForSaving","validateWorkoutPlan","getExerciseMuscleGroups","useWorkout","_s","plan","setPlan","editablePlan","setEditablePlan","loading","setLoading","error","setError","success","setSuccess","isEditing","setIsEditing","deleteConfirmOpen","setDeleteConfirmOpen","exerciseSearchResults","setExerciseSearchResults","searchLoading","setSearchLoading","currentDayTab","setCurrentDayTab","navigate","fetchPlan","data","JSON","parse","stringify","err","response","status","_err$response","_err$response$data","_err$response2","message","localStorage","removeItem","state","from","pathname","searchForExercises","query","length","exercises","searchErr","console","handlePlanInfoChange","field","value","prev","handleWorkoutChange","workoutIndex","updatedWorkouts","workouts","handleSetDetailChange","setIndex","updatedSetDetails","set_details","addWorkoutToDay","day","removeWorkout","filter","_","index","addSetToWorkout","newSetNumber","removeSetFromWorkout","sIdx","map","set","idx","set_number","selectExercise","exercise","musclesTargeted","name","exercise_id","id","muscles_targeted","savePlan","validation","isValid","planToSave","_err$response3","_err$response3$data","deletePlan","_err$response4","_err$response4$data","createNewPlan","newPlan","startEditing","cancelEditing","openDeleteConfirm","closeDeleteConfirm","displayedPlan","groupedWorkouts","allDaysWorkouts","refetchPlan"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/hooks/useWorkout.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  getMyWorkoutPlan, \n  updateMyWorkoutPlan, \n  deleteMyWorkoutPlan, \n  searchExercises, \n  createWorkoutPlan \n} from '../api';\nimport { \n  createEmptyPlan, \n  createEmptyWorkout, \n  createEmptySetDetail, \n  groupWorkoutsByDay,\n  getAllDaysWithWorkouts,\n  cleanPlanForSaving,\n  validateWorkoutPlan,\n  getExerciseMuscleGroups\n} from '../utils/workoutUtils';\n\n/**\n * Custom hook for managing workout plan data and operations\n * @returns {Object} Workout state and handlers\n */\nexport const useWorkout = () => {\n  // Core state\n  const [plan, setPlan] = useState(null);\n  const [editablePlan, setEditablePlan] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n\n  // Exercise search state\n  const [exerciseSearchResults, setExerciseSearchResults] = useState([]);\n  const [searchLoading, setSearchLoading] = useState(false);\n\n  // UI state\n  const [currentDayTab, setCurrentDayTab] = useState(0);\n\n  const navigate = useNavigate();\n\n  /**\n   * Fetch workout plan from API\n   */\n  const fetchPlan = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const { data } = await getMyWorkoutPlan();\n      setPlan(data);\n      setEditablePlan(JSON.parse(JSON.stringify(data))); // Deep copy for editing\n    } catch (err) {\n      if (err.response && err.response.status === 404) {\n        setPlan(null);\n        setEditablePlan(null);\n        setError('No workout plan found. You can create one.');\n      } else {\n        setError(err.response?.data?.message || 'Failed to fetch workout plan.');\n        \n        // Handle authentication errors\n        if (err.response?.status === 401) {\n          localStorage.removeItem('genfitAuth');\n          navigate('/login', { state: { from: { pathname: '/workout' } } });\n        }\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Search for exercises\n   */\n  const searchForExercises = useCallback(async (query) => {\n    if (query && query.length >= 2) {\n      setSearchLoading(true);\n      try {\n        const { data } = await searchExercises(query);\n        setExerciseSearchResults(data.exercises || []);\n      } catch (searchErr) {\n        console.error('Exercise search failed:', searchErr);\n        setExerciseSearchResults([]);\n      } finally {\n        setSearchLoading(false);\n      }\n    } else {\n      setExerciseSearchResults([]);\n    }\n  }, []);\n\n  /**\n   * Handle plan basic info changes (name, description)\n   */\n  const handlePlanInfoChange = useCallback((field, value) => {\n    setEditablePlan(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  /**\n   * Handle workout field changes\n   */\n  const handleWorkoutChange = useCallback((workoutIndex, field, value) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      updatedWorkouts[workoutIndex] = { \n        ...updatedWorkouts[workoutIndex], \n        [field]: value \n      };\n      return { ...prev, workouts: updatedWorkouts };\n    });\n  }, []);\n\n  /**\n   * Handle set detail changes\n   */\n  const handleSetDetailChange = useCallback((workoutIndex, setIndex, field, value) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      const updatedSetDetails = [...updatedWorkouts[workoutIndex].set_details];\n      updatedSetDetails[setIndex] = { \n        ...updatedSetDetails[setIndex], \n        [field]: value \n      };\n      updatedWorkouts[workoutIndex] = { \n        ...updatedWorkouts[workoutIndex], \n        set_details: updatedSetDetails \n      };\n      return { ...prev, workouts: updatedWorkouts };\n    });\n  }, []);\n\n  /**\n   * Add a new workout to a specific day\n   */\n  const addWorkoutToDay = useCallback((day) => {\n    setEditablePlan(prev => ({\n      ...prev,\n      workouts: [...prev.workouts, createEmptyWorkout(day)]\n    }));\n  }, []);\n\n  /**\n   * Remove a workout\n   */\n  const removeWorkout = useCallback((workoutIndex) => {\n    setEditablePlan(prev => ({\n      ...prev,\n      workouts: prev.workouts.filter((_, index) => index !== workoutIndex)\n    }));\n  }, []);\n\n  /**\n   * Add a set to a workout\n   */\n  const addSetToWorkout = useCallback((workoutIndex) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      const newSetNumber = updatedWorkouts[workoutIndex].set_details.length + 1;\n      updatedWorkouts[workoutIndex].set_details = [\n        ...updatedWorkouts[workoutIndex].set_details, \n        createEmptySetDetail(newSetNumber)\n      ];\n      return { ...prev, workouts: updatedWorkouts };\n    });\n  }, []);\n\n  /**\n   * Remove a set from a workout\n   */\n  const removeSetFromWorkout = useCallback((workoutIndex, setIndex) => {\n    setEditablePlan(prev => {\n      const updatedWorkouts = [...prev.workouts];\n      updatedWorkouts[workoutIndex].set_details = updatedWorkouts[workoutIndex].set_details\n        .filter((_, sIdx) => sIdx !== setIndex)\n        .map((set, idx) => ({ ...set, set_number: idx + 1 })); // Renumber sets\n      \n      return { ...prev, workouts: updatedWorkouts };\n    });\n  }, []);\n\n  /**\n   * Select an exercise from search results\n   */\n  const selectExercise = useCallback((workoutIndex, exercise) => {\n    if (exercise) {\n      // Use the utility function to get muscles with fallback\n      const musclesTargeted = getExerciseMuscleGroups(exercise);\n      \n      setEditablePlan(prev => {\n        const updatedWorkouts = [...prev.workouts];\n        updatedWorkouts[workoutIndex] = {\n          ...updatedWorkouts[workoutIndex],\n          name: exercise.name,\n          exercise_id: exercise.id,\n          muscles_targeted: musclesTargeted\n        };\n        \n        return { ...prev, workouts: updatedWorkouts };\n      });\n    }\n  }, []);\n\n  /**\n   * Save workout plan changes\n   */\n  const savePlan = useCallback(async () => {\n    if (!editablePlan) return;\n\n    // Validate plan\n    const validation = validateWorkoutPlan(editablePlan);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const planToSave = cleanPlanForSaving(editablePlan);\n\n      if (plan && plan.id) {\n        // Update existing plan\n        await updateMyWorkoutPlan(planToSave);\n        setSuccess('Workout plan updated successfully!');\n      } else {\n        // Create new plan\n        await createWorkoutPlan(planToSave);\n        setSuccess('Workout plan created successfully!');\n      }\n      \n      await fetchPlan(); // Refetch to get latest version\n      setIsEditing(false);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to save workout plan.');\n    } finally {\n      setLoading(false);\n    }\n  }, [editablePlan, plan, fetchPlan]);\n\n  /**\n   * Delete workout plan\n   */\n  const deletePlan = useCallback(async () => {\n    setDeleteConfirmOpen(false);\n    if (!plan || !plan.id) return;\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      await deleteMyWorkoutPlan();\n      setSuccess('Workout plan deleted successfully!');\n      setPlan(null);\n      setEditablePlan(null);\n      setIsEditing(false);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to delete workout plan.');\n    } finally {\n      setLoading(false);\n    }\n  }, [plan]);\n\n  /**\n   * Start creating a new plan\n   */\n  const createNewPlan = useCallback(() => {\n    const newPlan = createEmptyPlan();\n    setPlan({ id: null, ...newPlan }); // Temporarily set plan to enable editing UI\n    setEditablePlan(JSON.parse(JSON.stringify(newPlan)));\n    setIsEditing(true);\n    setError(''); // Clear previous \"No plan found\" error\n  }, []);\n\n  /**\n   * Start editing existing plan\n   */\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n    setError('');\n    setSuccess('');\n  }, []);\n\n  /**\n   * Cancel editing\n   */\n  const cancelEditing = useCallback(() => {\n    setIsEditing(false);\n    if (plan && plan.id) {\n      setEditablePlan(JSON.parse(JSON.stringify(plan))); // Reset to original plan\n    } else {\n      setEditablePlan(null); // No existing plan, clear editable form\n      setError('No workout plan found. You can create one.'); // Reshow error\n    }\n    setError('');\n    setSuccess('');\n  }, [plan]);\n\n  /**\n   * Open delete confirmation dialog\n   */\n  const openDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  /**\n   * Close delete confirmation dialog\n   */\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(false);\n  }, []);\n\n  // Derived state\n  const displayedPlan = isEditing ? editablePlan : plan;\n  const groupedWorkouts = displayedPlan ? groupWorkoutsByDay(displayedPlan.workouts) : {};\n  const allDaysWorkouts = getAllDaysWithWorkouts(groupedWorkouts);\n\n  // Fetch plan on mount\n  useEffect(() => {\n    fetchPlan();\n  }, [fetchPlan]);\n\n  return {\n    // State\n    plan,\n    editablePlan,\n    loading,\n    error,\n    success,\n    isEditing,\n    deleteConfirmOpen,\n    exerciseSearchResults,\n    searchLoading,\n    currentDayTab,\n    \n    // Derived state\n    displayedPlan,\n    groupedWorkouts,\n    allDaysWorkouts,\n    \n    // Handlers\n    handlePlanInfoChange,\n    handleWorkoutChange,\n    handleSetDetailChange,\n    addWorkoutToDay,\n    removeWorkout,\n    addSetToWorkout,\n    removeSetFromWorkout,\n    selectExercise,\n    searchForExercises,\n    savePlan,\n    deletePlan,\n    createNewPlan,\n    startEditing,\n    cancelEditing,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    setCurrentDayTab,\n    \n    // Utilities\n    refetchPlan: fetchPlan\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}