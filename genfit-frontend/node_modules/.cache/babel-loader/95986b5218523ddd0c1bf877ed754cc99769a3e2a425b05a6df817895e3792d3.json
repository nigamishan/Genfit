{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport dayjs from 'dayjs';\nimport { getMyProgress, logProgress, deleteProgressEntry, getMyProgressSummary, getMyProgressTrend, getWorkoutVolume } from '../api';\nimport { DEFAULT_FILTERS, METRIC_TYPES } from '../constants/progressConstants';\nimport { createEmptyProgressEntry, validateProgressEntry, getMetricUnit } from '../utils/progressUtils';\n\n/**\n * Custom hook for managing progress data and operations\n */\nexport const useProgress = () => {\n  _s();\n  // Progress data state\n  const [progressEntries, setProgressEntries] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [trends, setTrends] = useState(null);\n  const [workoutVolume, setWorkoutVolume] = useState(null);\n\n  // UI state\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Form and filter state\n  const [filters, setFilters] = useState(DEFAULT_FILTERS);\n  const [newEntry, setNewEntry] = useState(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [deleteConfirm, setDeleteConfirm] = useState({\n    open: false,\n    entryId: null\n  });\n\n  // Fetch progress entries with filters\n  const fetchProgressData = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const params = {\n        metric_types: filters.metric_types.join(','),\n        start_date: filters.start_date ? filters.start_date.toISOString() : undefined,\n        end_date: filters.end_date ? filters.end_date.toISOString() : undefined,\n        sort_order: filters.sort_order,\n        limit: filters.limit\n      };\n      const {\n        data\n      } = await getMyProgress(params);\n      setProgressEntries(data.entries || []);\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch progress entries.');\n      if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        // Handle authentication error\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setLoading(false);\n  }, [filters]);\n\n  // Fetch progress summary\n  const fetchSummary = useCallback(async () => {\n    try {\n      const {\n        data\n      } = await getMyProgressSummary();\n      setSummary(data.summary || {});\n    } catch (err) {\n      var _err$response3, _err$response3$data, _err$response4;\n      console.error(\"Failed to fetch summary:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message);\n      if (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Fetch progress trends\n  const fetchTrends = useCallback(async () => {\n    try {\n      const metricTypes = filters.metric_types.length > 0 ? filters.metric_types.join(',') : Object.values(METRIC_TYPES).join(',');\n      const params = {\n        metric_types: metricTypes\n      };\n      const {\n        data\n      } = await getMyProgressTrend(params);\n      setTrends(data.trends || {});\n    } catch (err) {\n      var _err$response5, _err$response5$data, _err$response6;\n      console.error(\"Failed to fetch trends:\", ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || err.message);\n      if (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : _err$response6.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch workout volume data\n  const fetchWorkoutVolume = useCallback(async () => {\n    try {\n      const {\n        data\n      } = await getWorkoutVolume();\n      setWorkoutVolume(data);\n    } catch (err) {\n      var _err$response7, _err$response7$data, _err$response8;\n      console.error(\"Failed to fetch workout volume:\", ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || err.message);\n      if (((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : _err$response8.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchProgressData();\n    fetchSummary();\n    fetchTrends();\n    fetchWorkoutVolume();\n  }, [fetchProgressData, fetchSummary, fetchTrends, fetchWorkoutVolume]);\n\n  // Filter handlers\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilters(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = (name, date) => {\n    setFilters(prev => ({\n      ...prev,\n      [name]: date\n    }));\n  };\n  const applyFilters = useCallback(() => {\n    // Force re-fetch with current filters\n    setLoading(true);\n    setError('');\n    const fetchWithCurrentFilters = async () => {\n      try {\n        const params = {\n          metric_types: filters.metric_types.join(','),\n          start_date: filters.start_date ? filters.start_date.toISOString() : undefined,\n          end_date: filters.end_date ? filters.end_date.toISOString() : undefined,\n          sort_order: filters.sort_order,\n          limit: filters.limit\n        };\n\n        // Fetch progress data and trends with current filters\n        const [progressResponse, trendsResponse] = await Promise.all([getMyProgress(params), getMyProgressTrend({\n          metric_types: filters.metric_types.length > 0 ? filters.metric_types.join(',') : Object.values(METRIC_TYPES).join(',')\n        })]);\n        setProgressEntries(progressResponse.data.entries || []);\n        setTrends(trendsResponse.data.trends || {});\n      } catch (err) {\n        var _err$response9, _err$response9$data, _err$response0;\n        setError(((_err$response9 = err.response) === null || _err$response9 === void 0 ? void 0 : (_err$response9$data = _err$response9.data) === null || _err$response9$data === void 0 ? void 0 : _err$response9$data.message) || 'Failed to apply filters.');\n        if (((_err$response0 = err.response) === null || _err$response0 === void 0 ? void 0 : _err$response0.status) === 401) {\n          localStorage.removeItem('genfitAuth');\n          window.location.href = '/login';\n        }\n      }\n      setLoading(false);\n    };\n    fetchWithCurrentFilters();\n  }, [filters]);\n  const resetFilters = () => {\n    setFilters(DEFAULT_FILTERS);\n    // Auto-apply after reset\n    setTimeout(() => {\n      fetchProgressData();\n      fetchTrends();\n    }, 0);\n  };\n\n  // Form handlers\n  const handleNewEntryChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    let updatedEntry = {\n      ...newEntry,\n      [name]: value\n    };\n\n    // Update unit when metric type changes\n    if (name === 'metric_type') {\n      updatedEntry.unit = getMetricUnit(value);\n    }\n    setNewEntry(updatedEntry);\n  };\n  const handleNewEntryDateChange = date => {\n    setNewEntry(prev => ({\n      ...prev,\n      recorded_at: date\n    }));\n  };\n  const toggleAddForm = () => {\n    setShowAddForm(!showAddForm);\n    if (!showAddForm) {\n      // Reset form when opening\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  // CRUD operations\n  const addProgressEntry = async e => {\n    e.preventDefault();\n\n    // Validate entry\n    const validation = validateProgressEntry(newEntry);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    try {\n      const payload = {\n        ...newEntry,\n        value: parseFloat(newEntry.value),\n        recorded_at: newEntry.recorded_at.toISOString()\n      };\n      await logProgress(payload);\n      setSuccess('Progress entry added successfully!');\n      setShowAddForm(false);\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n\n      // Refresh all data\n      await Promise.all([fetchProgressData(), fetchSummary(), fetchTrends()]);\n    } catch (err) {\n      var _err$response1, _err$response1$data, _err$response10;\n      setError(((_err$response1 = err.response) === null || _err$response1 === void 0 ? void 0 : (_err$response1$data = _err$response1.data) === null || _err$response1$data === void 0 ? void 0 : _err$response1$data.message) || 'Failed to add progress entry.');\n      if (((_err$response10 = err.response) === null || _err$response10 === void 0 ? void 0 : _err$response10.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setSubmitting(false);\n  };\n  const openDeleteConfirm = entryId => {\n    setDeleteConfirm({\n      open: true,\n      entryId\n    });\n  };\n  const closeDeleteConfirm = () => {\n    setDeleteConfirm({\n      open: false,\n      entryId: null\n    });\n  };\n  const deleteEntry = async () => {\n    if (!deleteConfirm.entryId) return;\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    try {\n      await deleteProgressEntry(deleteConfirm.entryId);\n      setSuccess('Progress entry deleted successfully!');\n\n      // Refresh all data\n      await Promise.all([fetchProgressData(), fetchSummary(), fetchTrends()]);\n    } catch (err) {\n      var _err$response11, _err$response11$data, _err$response12;\n      setError(((_err$response11 = err.response) === null || _err$response11 === void 0 ? void 0 : (_err$response11$data = _err$response11.data) === null || _err$response11$data === void 0 ? void 0 : _err$response11$data.message) || 'Failed to delete progress entry.');\n      if (((_err$response12 = err.response) === null || _err$response12 === void 0 ? void 0 : _err$response12.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    closeDeleteConfirm();\n    setSubmitting(false);\n  };\n\n  // Clear messages\n  const clearMessages = () => {\n    setError('');\n    setSuccess('');\n  };\n  return {\n    // Data\n    progressEntries,\n    summary,\n    trends,\n    workoutVolume,\n    // UI State\n    loading,\n    submitting,\n    error,\n    success,\n    // Form State\n    filters,\n    newEntry,\n    showAddForm,\n    deleteConfirm,\n    // Handlers\n    handleFilterChange,\n    handleDateChange,\n    applyFilters,\n    resetFilters,\n    handleNewEntryChange,\n    handleNewEntryDateChange,\n    toggleAddForm,\n    addProgressEntry,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    deleteEntry,\n    clearMessages,\n    // Manual refresh functions\n    refreshData: () => {\n      fetchProgressData();\n      fetchSummary();\n      fetchTrends();\n      fetchWorkoutVolume();\n    },\n    refreshProgressData: fetchProgressData,\n    refreshSummary: fetchSummary,\n    refreshTrends: fetchTrends,\n    refreshWorkoutVolume: fetchWorkoutVolume\n  };\n};\n_s(useProgress, \"ALLGSdR/zgaUVdsMplIz8b6S8yg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","dayjs","getMyProgress","logProgress","deleteProgressEntry","getMyProgressSummary","getMyProgressTrend","getWorkoutVolume","DEFAULT_FILTERS","METRIC_TYPES","createEmptyProgressEntry","validateProgressEntry","getMetricUnit","useProgress","_s","progressEntries","setProgressEntries","summary","setSummary","trends","setTrends","workoutVolume","setWorkoutVolume","loading","setLoading","submitting","setSubmitting","error","setError","success","setSuccess","filters","setFilters","newEntry","setNewEntry","WEIGHT","showAddForm","setShowAddForm","deleteConfirm","setDeleteConfirm","open","entryId","fetchProgressData","params","metric_types","join","start_date","toISOString","undefined","end_date","sort_order","limit","data","entries","err","_err$response","_err$response$data","_err$response2","response","message","status","localStorage","removeItem","window","location","href","fetchSummary","_err$response3","_err$response3$data","_err$response4","console","fetchTrends","metricTypes","length","Object","values","_err$response5","_err$response5$data","_err$response6","fetchWorkoutVolume","_err$response7","_err$response7$data","_err$response8","handleFilterChange","e","name","value","target","prev","handleDateChange","date","applyFilters","fetchWithCurrentFilters","progressResponse","trendsResponse","Promise","all","_err$response9","_err$response9$data","_err$response0","resetFilters","setTimeout","handleNewEntryChange","updatedEntry","unit","handleNewEntryDateChange","recorded_at","toggleAddForm","addProgressEntry","preventDefault","validation","isValid","payload","parseFloat","_err$response1","_err$response1$data","_err$response10","openDeleteConfirm","closeDeleteConfirm","deleteEntry","_err$response11","_err$response11$data","_err$response12","clearMessages","refreshData","refreshProgressData","refreshSummary","refreshTrends","refreshWorkoutVolume"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/hooks/useProgress.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport dayjs from 'dayjs';\nimport { \n  getMyProgress, \n  logProgress, \n  deleteProgressEntry, \n  getMyProgressSummary, \n  getMyProgressTrend,\n  getWorkoutVolume \n} from '../api';\nimport { \n  DEFAULT_FILTERS, \n  METRIC_TYPES \n} from '../constants/progressConstants';\nimport { \n  createEmptyProgressEntry, \n  validateProgressEntry,\n  getMetricUnit \n} from '../utils/progressUtils';\n\n/**\n * Custom hook for managing progress data and operations\n */\nexport const useProgress = () => {\n  // Progress data state\n  const [progressEntries, setProgressEntries] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [trends, setTrends] = useState(null);\n  const [workoutVolume, setWorkoutVolume] = useState(null);\n  \n  // UI state\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  \n  // Form and filter state\n  const [filters, setFilters] = useState(DEFAULT_FILTERS);\n  const [newEntry, setNewEntry] = useState(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [deleteConfirm, setDeleteConfirm] = useState({ open: false, entryId: null });\n\n  // Fetch progress entries with filters\n  const fetchProgressData = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const params = {\n        metric_types: filters.metric_types.join(','),\n        start_date: filters.start_date ? filters.start_date.toISOString() : undefined,\n        end_date: filters.end_date ? filters.end_date.toISOString() : undefined,\n        sort_order: filters.sort_order,\n        limit: filters.limit\n      };\n      const { data } = await getMyProgress(params);\n      setProgressEntries(data.entries || []);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to fetch progress entries.');\n      if (err.response?.status === 401) {\n        // Handle authentication error\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setLoading(false);\n  }, [filters]);\n\n  // Fetch progress summary\n  const fetchSummary = useCallback(async () => {\n    try {\n      const { data } = await getMyProgressSummary();\n      setSummary(data.summary || {});\n    } catch (err) {\n      console.error(\"Failed to fetch summary:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Fetch progress trends\n  const fetchTrends = useCallback(async () => {\n    try {\n      const metricTypes = filters.metric_types.length > 0 \n        ? filters.metric_types.join(',') \n        : Object.values(METRIC_TYPES).join(',');\n      \n      const params = { metric_types: metricTypes };\n      const { data } = await getMyProgressTrend(params);\n      setTrends(data.trends || {});\n    } catch (err) {\n      console.error(\"Failed to fetch trends:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, [filters.metric_types]);\n\n  // Fetch workout volume data\n  const fetchWorkoutVolume = useCallback(async () => {\n    try {\n      const { data } = await getWorkoutVolume();\n      setWorkoutVolume(data);\n    } catch (err) {\n      console.error(\"Failed to fetch workout volume:\", err.response?.data?.message || err.message);\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchProgressData();\n    fetchSummary();\n    fetchTrends();\n    fetchWorkoutVolume();\n  }, [fetchProgressData, fetchSummary, fetchTrends, fetchWorkoutVolume]);\n\n  // Filter handlers\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilters(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleDateChange = (name, date) => {\n    setFilters(prev => ({ ...prev, [name]: date }));\n  };\n\n  const applyFilters = useCallback(() => {\n    // Force re-fetch with current filters\n    setLoading(true);\n    setError('');\n    \n    const fetchWithCurrentFilters = async () => {\n      try {\n        const params = {\n          metric_types: filters.metric_types.join(','),\n          start_date: filters.start_date ? filters.start_date.toISOString() : undefined,\n          end_date: filters.end_date ? filters.end_date.toISOString() : undefined,\n          sort_order: filters.sort_order,\n          limit: filters.limit\n        };\n        \n        // Fetch progress data and trends with current filters\n        const [progressResponse, trendsResponse] = await Promise.all([\n          getMyProgress(params),\n          getMyProgressTrend({ \n            metric_types: filters.metric_types.length > 0 \n              ? filters.metric_types.join(',') \n              : Object.values(METRIC_TYPES).join(',') \n          })\n        ]);\n        \n        setProgressEntries(progressResponse.data.entries || []);\n        setTrends(trendsResponse.data.trends || {});\n      } catch (err) {\n        setError(err.response?.data?.message || 'Failed to apply filters.');\n        if (err.response?.status === 401) {\n          localStorage.removeItem('genfitAuth');\n          window.location.href = '/login';\n        }\n      }\n      setLoading(false);\n    };\n    \n    fetchWithCurrentFilters();\n  }, [filters]);\n\n  const resetFilters = () => {\n    setFilters(DEFAULT_FILTERS);\n    // Auto-apply after reset\n    setTimeout(() => {\n      fetchProgressData();\n      fetchTrends();\n    }, 0);\n  };\n\n  // Form handlers\n  const handleNewEntryChange = (e) => {\n    const { name, value } = e.target;\n    let updatedEntry = { ...newEntry, [name]: value };\n    \n    // Update unit when metric type changes\n    if (name === 'metric_type') {\n      updatedEntry.unit = getMetricUnit(value);\n    }\n    \n    setNewEntry(updatedEntry);\n  };\n\n  const handleNewEntryDateChange = (date) => {\n    setNewEntry(prev => ({ ...prev, recorded_at: date }));\n  };\n\n  const toggleAddForm = () => {\n    setShowAddForm(!showAddForm);\n    if (!showAddForm) {\n      // Reset form when opening\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  // CRUD operations\n  const addProgressEntry = async (e) => {\n    e.preventDefault();\n    \n    // Validate entry\n    const validation = validateProgressEntry(newEntry);\n    if (!validation.isValid) {\n      setError(validation.error);\n      return;\n    }\n\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const payload = {\n        ...newEntry,\n        value: parseFloat(newEntry.value),\n        recorded_at: newEntry.recorded_at.toISOString(),\n      };\n      \n      await logProgress(payload);\n      setSuccess('Progress entry added successfully!');\n      setShowAddForm(false);\n      setNewEntry(createEmptyProgressEntry(METRIC_TYPES.WEIGHT));\n      \n      // Refresh all data\n      await Promise.all([\n        fetchProgressData(),\n        fetchSummary(),\n        fetchTrends()\n      ]);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to add progress entry.');\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    setSubmitting(false);\n  };\n\n  const openDeleteConfirm = (entryId) => {\n    setDeleteConfirm({ open: true, entryId });\n  };\n\n  const closeDeleteConfirm = () => {\n    setDeleteConfirm({ open: false, entryId: null });\n  };\n\n  const deleteEntry = async () => {\n    if (!deleteConfirm.entryId) return;\n\n    setSubmitting(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      await deleteProgressEntry(deleteConfirm.entryId);\n      setSuccess('Progress entry deleted successfully!');\n      \n      // Refresh all data\n      await Promise.all([\n        fetchProgressData(),\n        fetchSummary(),\n        fetchTrends()\n      ]);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to delete progress entry.');\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        window.location.href = '/login';\n      }\n    }\n    \n    closeDeleteConfirm();\n    setSubmitting(false);\n  };\n\n  // Clear messages\n  const clearMessages = () => {\n    setError('');\n    setSuccess('');\n  };\n\n  return {\n    // Data\n    progressEntries,\n    summary,\n    trends,\n    workoutVolume,\n    \n    // UI State\n    loading,\n    submitting,\n    error,\n    success,\n    \n    // Form State\n    filters,\n    newEntry,\n    showAddForm,\n    deleteConfirm,\n    \n    // Handlers\n    handleFilterChange,\n    handleDateChange,\n    applyFilters,\n    resetFilters,\n    handleNewEntryChange,\n    handleNewEntryDateChange,\n    toggleAddForm,\n    addProgressEntry,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    deleteEntry,\n    clearMessages,\n    \n    // Manual refresh functions\n    refreshData: () => {\n      fetchProgressData();\n      fetchSummary();\n      fetchTrends();\n      fetchWorkoutVolume();\n    },\n    refreshProgressData: fetchProgressData,\n    refreshSummary: fetchSummary,\n    refreshTrends: fetchTrends,\n    refreshWorkoutVolume: fetchWorkoutVolume\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}