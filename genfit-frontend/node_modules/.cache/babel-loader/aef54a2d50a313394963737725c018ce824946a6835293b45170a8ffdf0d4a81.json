{"ast":null,"code":"import { WORKOUT_DEFAULTS } from '../constants/workoutConstants';\n\n/**\n * Create an empty set detail object with default values\n * @param {number} setNumber - The set number\n * @returns {Object} Empty set detail object\n */\nexport const createEmptySetDetail = (setNumber = 1) => ({\n  set_number: setNumber,\n  reps: WORKOUT_DEFAULTS.DEFAULT_REPS,\n  weight: WORKOUT_DEFAULTS.DEFAULT_WEIGHT,\n  rpe: WORKOUT_DEFAULTS.DEFAULT_RPE,\n  rest_duration: WORKOUT_DEFAULTS.DEFAULT_REST,\n  is_warm_up: false\n});\n\n/**\n * Create an empty workout object\n * @param {number} day - The workout day\n * @returns {Object} Empty workout object\n */\nexport const createEmptyWorkout = (day = 1) => ({\n  name: '',\n  exercise_id: '',\n  muscles_targeted: [],\n  day: day,\n  set_details: [createEmptySetDetail()],\n  temp_id: Date.now() + Math.random() // For tracking during editing\n});\n\n/**\n * Create an empty workout plan\n * @returns {Object} Empty workout plan object\n */\nexport const createEmptyPlan = () => ({\n  name: 'My New Workout Plan',\n  description: 'A comprehensive plan for the week.',\n  workouts: [createEmptyWorkout(1)]\n});\n\n/**\n * Group workouts by day for display\n * @param {Array} workouts - Array of workout objects\n * @returns {Object} Workouts grouped by day number\n */\nexport const groupWorkoutsByDay = workouts => {\n  if (!workouts || !Array.isArray(workouts)) return {};\n  return workouts.reduce((acc, workout) => {\n    const day = workout.day || 1; // Default to day 1 if not specified\n    if (!acc[day]) acc[day] = [];\n    acc[day].push(workout);\n    return acc;\n  }, {});\n};\n\n/**\n * Get sorted array of days that have workouts\n * @param {Object} groupedWorkouts - Workouts grouped by day\n * @returns {Array} Sorted array of day numbers\n */\nexport const getSortedDays = groupedWorkouts => {\n  return Object.keys(groupedWorkouts).map(Number).sort((a, b) => a - b);\n};\n\n/**\n * Get all 7 days with empty arrays for days without workouts\n * @param {Object} groupedWorkouts - Workouts grouped by day\n * @returns {Object} All 7 days with workout arrays\n */\nexport const getAllDaysWithWorkouts = groupedWorkouts => {\n  const allDays = {};\n  for (let day = 1; day <= 7; day++) {\n    allDays[day] = groupedWorkouts[day] || [];\n  }\n  return allDays;\n};\n\n/**\n * Calculate workout summary for a day\n * @param {Array} workouts - Array of workouts for a day\n * @returns {Object} Summary object with exercise count, total sets, etc.\n */\nexport const calculateDaySummary = workouts => {\n  if (!workouts || workouts.length === 0) {\n    return {\n      exerciseCount: 0,\n      totalSets: 0,\n      totalExercises: 0,\n      muscleGroups: [],\n      isEmpty: true\n    };\n  }\n  const totalSets = workouts.reduce((sum, workout) => {\n    return sum + (workout.set_details ? workout.set_details.length : 0);\n  }, 0);\n  const allMuscleGroups = workouts.flatMap(workout => workout.muscles_targeted || []);\n  const uniqueMuscleGroups = [...new Set(allMuscleGroups)];\n  return {\n    exerciseCount: workouts.length,\n    totalSets,\n    totalExercises: workouts.length,\n    muscleGroups: uniqueMuscleGroups,\n    isEmpty: false\n  };\n};\n\n/**\n * Format set details for display\n * @param {Object} setDetail - Set detail object\n * @returns {string} Formatted set string\n */\nexport const formatSetDetails = setDetail => {\n  const warmupLabel = setDetail.is_warm_up ? ' (Warm-up)' : '';\n  return `${setDetail.reps} reps @ ${setDetail.weight}kg (RPE ${setDetail.rpe})${warmupLabel}`;\n};\n\n/**\n * Remove temporary IDs from workout plan before saving\n * @param {Object} plan - Workout plan object\n * @returns {Object} Plan without temporary IDs\n */\nexport const cleanPlanForSaving = plan => {\n  if (!plan) return plan;\n  return {\n    ...plan,\n    workouts: plan.workouts.map(({\n      temp_id,\n      ...workout\n    }) => workout)\n  };\n};\n\n/**\n * Validate workout plan data\n * @param {Object} plan - Workout plan to validate\n * @returns {Object} Validation result with isValid flag and error message\n */\nexport const validateWorkoutPlan = plan => {\n  if (!plan) {\n    return {\n      isValid: false,\n      error: 'Plan is required'\n    };\n  }\n  if (!plan.name || plan.name.trim().length === 0) {\n    return {\n      isValid: false,\n      error: 'Plan name is required'\n    };\n  }\n  if (!plan.workouts || plan.workouts.length === 0) {\n    return {\n      isValid: false,\n      error: 'At least one workout is required'\n    };\n  }\n\n  // Validate each workout\n  for (const workout of plan.workouts) {\n    if (!workout.name || workout.name.trim().length === 0) {\n      return {\n        isValid: false,\n        error: 'All exercises must have a name'\n      };\n    }\n    if (!workout.exercise_id) {\n      return {\n        isValid: false,\n        error: 'All exercises must be selected from the search'\n      };\n    }\n    if (!workout.set_details || workout.set_details.length === 0) {\n      return {\n        isValid: false,\n        error: 'All exercises must have at least one set'\n      };\n    }\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};","map":{"version":3,"names":["WORKOUT_DEFAULTS","createEmptySetDetail","setNumber","set_number","reps","DEFAULT_REPS","weight","DEFAULT_WEIGHT","rpe","DEFAULT_RPE","rest_duration","DEFAULT_REST","is_warm_up","createEmptyWorkout","day","name","exercise_id","muscles_targeted","set_details","temp_id","Date","now","Math","random","createEmptyPlan","description","workouts","groupWorkoutsByDay","Array","isArray","reduce","acc","workout","push","getSortedDays","groupedWorkouts","Object","keys","map","Number","sort","a","b","getAllDaysWithWorkouts","allDays","calculateDaySummary","length","exerciseCount","totalSets","totalExercises","muscleGroups","isEmpty","sum","allMuscleGroups","flatMap","uniqueMuscleGroups","Set","formatSetDetails","setDetail","warmupLabel","cleanPlanForSaving","plan","validateWorkoutPlan","isValid","error","trim"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/utils/workoutUtils.js"],"sourcesContent":["import { WORKOUT_DEFAULTS } from '../constants/workoutConstants';\n\n/**\n * Create an empty set detail object with default values\n * @param {number} setNumber - The set number\n * @returns {Object} Empty set detail object\n */\nexport const createEmptySetDetail = (setNumber = 1) => ({\n  set_number: setNumber,\n  reps: WORKOUT_DEFAULTS.DEFAULT_REPS,\n  weight: WORKOUT_DEFAULTS.DEFAULT_WEIGHT,\n  rpe: WORKOUT_DEFAULTS.DEFAULT_RPE,\n  rest_duration: WORKOUT_DEFAULTS.DEFAULT_REST,\n  is_warm_up: false\n});\n\n/**\n * Create an empty workout object\n * @param {number} day - The workout day\n * @returns {Object} Empty workout object\n */\nexport const createEmptyWorkout = (day = 1) => ({\n  name: '',\n  exercise_id: '',\n  muscles_targeted: [],\n  day: day,\n  set_details: [createEmptySetDetail()],\n  temp_id: Date.now() + Math.random() // For tracking during editing\n});\n\n/**\n * Create an empty workout plan\n * @returns {Object} Empty workout plan object\n */\nexport const createEmptyPlan = () => ({\n  name: 'My New Workout Plan',\n  description: 'A comprehensive plan for the week.',\n  workouts: [createEmptyWorkout(1)]\n});\n\n/**\n * Group workouts by day for display\n * @param {Array} workouts - Array of workout objects\n * @returns {Object} Workouts grouped by day number\n */\nexport const groupWorkoutsByDay = (workouts) => {\n  if (!workouts || !Array.isArray(workouts)) return {};\n  \n  return workouts.reduce((acc, workout) => {\n    const day = workout.day || 1; // Default to day 1 if not specified\n    if (!acc[day]) acc[day] = [];\n    acc[day].push(workout);\n    return acc;\n  }, {});\n};\n\n/**\n * Get sorted array of days that have workouts\n * @param {Object} groupedWorkouts - Workouts grouped by day\n * @returns {Array} Sorted array of day numbers\n */\nexport const getSortedDays = (groupedWorkouts) => {\n  return Object.keys(groupedWorkouts)\n    .map(Number)\n    .sort((a, b) => a - b);\n};\n\n/**\n * Get all 7 days with empty arrays for days without workouts\n * @param {Object} groupedWorkouts - Workouts grouped by day\n * @returns {Object} All 7 days with workout arrays\n */\nexport const getAllDaysWithWorkouts = (groupedWorkouts) => {\n  const allDays = {};\n  for (let day = 1; day <= 7; day++) {\n    allDays[day] = groupedWorkouts[day] || [];\n  }\n  return allDays;\n};\n\n/**\n * Calculate workout summary for a day\n * @param {Array} workouts - Array of workouts for a day\n * @returns {Object} Summary object with exercise count, total sets, etc.\n */\nexport const calculateDaySummary = (workouts) => {\n  if (!workouts || workouts.length === 0) {\n    return {\n      exerciseCount: 0,\n      totalSets: 0,\n      totalExercises: 0,\n      muscleGroups: [],\n      isEmpty: true\n    };\n  }\n\n  const totalSets = workouts.reduce((sum, workout) => {\n    return sum + (workout.set_details ? workout.set_details.length : 0);\n  }, 0);\n\n  const allMuscleGroups = workouts.flatMap(workout => workout.muscles_targeted || []);\n  const uniqueMuscleGroups = [...new Set(allMuscleGroups)];\n\n  return {\n    exerciseCount: workouts.length,\n    totalSets,\n    totalExercises: workouts.length,\n    muscleGroups: uniqueMuscleGroups,\n    isEmpty: false\n  };\n};\n\n/**\n * Format set details for display\n * @param {Object} setDetail - Set detail object\n * @returns {string} Formatted set string\n */\nexport const formatSetDetails = (setDetail) => {\n  const warmupLabel = setDetail.is_warm_up ? ' (Warm-up)' : '';\n  return `${setDetail.reps} reps @ ${setDetail.weight}kg (RPE ${setDetail.rpe})${warmupLabel}`;\n};\n\n/**\n * Remove temporary IDs from workout plan before saving\n * @param {Object} plan - Workout plan object\n * @returns {Object} Plan without temporary IDs\n */\nexport const cleanPlanForSaving = (plan) => {\n  if (!plan) return plan;\n  \n  return {\n    ...plan,\n    workouts: plan.workouts.map(({ temp_id, ...workout }) => workout)\n  };\n};\n\n/**\n * Validate workout plan data\n * @param {Object} plan - Workout plan to validate\n * @returns {Object} Validation result with isValid flag and error message\n */\nexport const validateWorkoutPlan = (plan) => {\n  if (!plan) {\n    return { isValid: false, error: 'Plan is required' };\n  }\n\n  if (!plan.name || plan.name.trim().length === 0) {\n    return { isValid: false, error: 'Plan name is required' };\n  }\n\n  if (!plan.workouts || plan.workouts.length === 0) {\n    return { isValid: false, error: 'At least one workout is required' };\n  }\n\n  // Validate each workout\n  for (const workout of plan.workouts) {\n    if (!workout.name || workout.name.trim().length === 0) {\n      return { isValid: false, error: 'All exercises must have a name' };\n    }\n\n    if (!workout.exercise_id) {\n      return { isValid: false, error: 'All exercises must be selected from the search' };\n    }\n\n    if (!workout.set_details || workout.set_details.length === 0) {\n      return { isValid: false, error: 'All exercises must have at least one set' };\n    }\n  }\n\n  return { isValid: true, error: null };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}