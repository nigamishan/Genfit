{"ast":null,"code":"import { VALIDATION_RULES } from '../constants/profileConstants';\n\n/**\n * Initialize form data from profile object\n * @param {Object} profile - User profile data from API\n * @returns {Object} Initialized form data structure\n */\nexport const getInitialFormData = profile => {\n  var _profile$current_fitn, _profile$current_fitn2, _profile$current_fitn3, _profile$current_fitn4, _profile$current_fitn5, _profile$current_fitn6, _profile$current_fitn7, _profile$current_fitn8, _profile$current_fitn9, _profile$goals, _profile$goals2, _profile$goals3, _profile$goals4, _profile$goals4$targe, _profile$goals5, _profile$goals5$targe, _profile$goals6, _profile$goals6$targe;\n  return {\n    name: (profile === null || profile === void 0 ? void 0 : profile.name) || '',\n    email: (profile === null || profile === void 0 ? void 0 : profile.email) || '',\n    age: (profile === null || profile === void 0 ? void 0 : profile.age) || 18,\n    sex: (profile === null || profile === void 0 ? void 0 : profile.sex) || '',\n    weight: (profile === null || profile === void 0 ? void 0 : profile.weight) || 0,\n    height: (profile === null || profile === void 0 ? void 0 : profile.height) || 0,\n    current_fitness: {\n      fitness_level: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn = profile.current_fitness) === null || _profile$current_fitn === void 0 ? void 0 : _profile$current_fitn.fitness_level) || '',\n      training_frequency: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn2 = profile.current_fitness) === null || _profile$current_fitn2 === void 0 ? void 0 : _profile$current_fitn2.training_frequency) || 3,\n      body_fat_percentage: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn3 = profile.current_fitness) === null || _profile$current_fitn3 === void 0 ? void 0 : _profile$current_fitn3.body_fat_percentage) || 0,\n      personal_records: {\n        deadlift: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn4 = profile.current_fitness) === null || _profile$current_fitn4 === void 0 ? void 0 : (_profile$current_fitn5 = _profile$current_fitn4.personal_records) === null || _profile$current_fitn5 === void 0 ? void 0 : _profile$current_fitn5.deadlift) || 0,\n        squat: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn6 = profile.current_fitness) === null || _profile$current_fitn6 === void 0 ? void 0 : (_profile$current_fitn7 = _profile$current_fitn6.personal_records) === null || _profile$current_fitn7 === void 0 ? void 0 : _profile$current_fitn7.squat) || 0,\n        bench: (profile === null || profile === void 0 ? void 0 : (_profile$current_fitn8 = profile.current_fitness) === null || _profile$current_fitn8 === void 0 ? void 0 : (_profile$current_fitn9 = _profile$current_fitn8.personal_records) === null || _profile$current_fitn9 === void 0 ? void 0 : _profile$current_fitn9.bench) || 0\n      }\n    },\n    goals: {\n      goal_types: (profile === null || profile === void 0 ? void 0 : (_profile$goals = profile.goals) === null || _profile$goals === void 0 ? void 0 : _profile$goals.goal_types) || [],\n      target_weight: (profile === null || profile === void 0 ? void 0 : (_profile$goals2 = profile.goals) === null || _profile$goals2 === void 0 ? void 0 : _profile$goals2.target_weight) || 0,\n      target_body_fat: (profile === null || profile === void 0 ? void 0 : (_profile$goals3 = profile.goals) === null || _profile$goals3 === void 0 ? void 0 : _profile$goals3.target_body_fat) || 0,\n      target_personal_records: {\n        deadlift: (profile === null || profile === void 0 ? void 0 : (_profile$goals4 = profile.goals) === null || _profile$goals4 === void 0 ? void 0 : (_profile$goals4$targe = _profile$goals4.target_personal_records) === null || _profile$goals4$targe === void 0 ? void 0 : _profile$goals4$targe.deadlift) || 0,\n        squat: (profile === null || profile === void 0 ? void 0 : (_profile$goals5 = profile.goals) === null || _profile$goals5 === void 0 ? void 0 : (_profile$goals5$targe = _profile$goals5.target_personal_records) === null || _profile$goals5$targe === void 0 ? void 0 : _profile$goals5$targe.squat) || 0,\n        bench: (profile === null || profile === void 0 ? void 0 : (_profile$goals6 = profile.goals) === null || _profile$goals6 === void 0 ? void 0 : (_profile$goals6$targe = _profile$goals6.target_personal_records) === null || _profile$goals6$targe === void 0 ? void 0 : _profile$goals6$targe.bench) || 0\n      }\n    }\n  };\n};\n\n/**\n * Validate form data before submission\n * @param {Object} formData - Form data to validate\n * @returns {Object} Validation result with isValid flag and error message\n */\nexport const validateFormData = formData => {\n  // Age validation\n  if (formData.age < VALIDATION_RULES.MIN_AGE) {\n    return {\n      isValid: false,\n      error: `Age must be at least ${VALIDATION_RULES.MIN_AGE} years old.`\n    };\n  }\n\n  // Training frequency validation\n  const {\n    training_frequency\n  } = formData.current_fitness;\n  if (training_frequency < VALIDATION_RULES.MIN_TRAINING_FREQUENCY || training_frequency > VALIDATION_RULES.MAX_TRAINING_FREQUENCY) {\n    return {\n      isValid: false,\n      error: `Training frequency must be between ${VALIDATION_RULES.MIN_TRAINING_FREQUENCY} and ${VALIDATION_RULES.MAX_TRAINING_FREQUENCY} days per week.`\n    };\n  }\n\n  // All validations passed\n  return {\n    isValid: true,\n    error: null\n  };\n};\n\n/**\n * Update nested form data based on field name path\n * @param {Object} formData - Current form data\n * @param {string} fieldName - Field name (can be nested with dots)\n * @param {any} value - New value\n * @returns {Object} Updated form data\n */\nexport const updateFormField = (formData, fieldName, value) => {\n  if (!fieldName.includes('.')) {\n    return {\n      ...formData,\n      [fieldName]: value\n    };\n  }\n  const parts = fieldName.split('.');\n  const newFormData = {\n    ...formData\n  };\n  if (parts.length === 2) {\n    const [parent, child] = parts;\n    newFormData[parent] = {\n      ...newFormData[parent],\n      [child]: value\n    };\n  } else if (parts.length === 3) {\n    const [parent, middle, child] = parts;\n    newFormData[parent] = {\n      ...newFormData[parent],\n      [middle]: {\n        ...newFormData[parent][middle],\n        [child]: value\n      }\n    };\n  }\n  return newFormData;\n};\n\n/**\n * Check if any personal records are set\n * @param {Object} personalRecords - Personal records object\n * @returns {boolean} True if any record is greater than 0\n */\nexport const hasPersonalRecords = personalRecords => {\n  if (!personalRecords) return false;\n  return personalRecords.deadlift > 0 || personalRecords.squat > 0 || personalRecords.bench > 0;\n};\n\n/**\n * Format display value for optional numeric fields\n * @param {number} value - Numeric value\n * @param {string} unit - Unit suffix\n * @returns {string} Formatted display string\n */\nexport const formatOptionalValue = (value, unit = '') => {\n  return value > 0 ? `${value}${unit}` : 'Not set';\n};","map":{"version":3,"names":["VALIDATION_RULES","getInitialFormData","profile","_profile$current_fitn","_profile$current_fitn2","_profile$current_fitn3","_profile$current_fitn4","_profile$current_fitn5","_profile$current_fitn6","_profile$current_fitn7","_profile$current_fitn8","_profile$current_fitn9","_profile$goals","_profile$goals2","_profile$goals3","_profile$goals4","_profile$goals4$targe","_profile$goals5","_profile$goals5$targe","_profile$goals6","_profile$goals6$targe","name","email","age","sex","weight","height","current_fitness","fitness_level","training_frequency","body_fat_percentage","personal_records","deadlift","squat","bench","goals","goal_types","target_weight","target_body_fat","target_personal_records","validateFormData","formData","MIN_AGE","isValid","error","MIN_TRAINING_FREQUENCY","MAX_TRAINING_FREQUENCY","updateFormField","fieldName","value","includes","parts","split","newFormData","length","parent","child","middle","hasPersonalRecords","personalRecords","formatOptionalValue","unit"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/utils/profileUtils.js"],"sourcesContent":["import { VALIDATION_RULES } from '../constants/profileConstants';\n\n/**\n * Initialize form data from profile object\n * @param {Object} profile - User profile data from API\n * @returns {Object} Initialized form data structure\n */\nexport const getInitialFormData = (profile) => ({\n  name: profile?.name || '',\n  email: profile?.email || '',\n  age: profile?.age || 18,\n  sex: profile?.sex || '',\n  weight: profile?.weight || 0,\n  height: profile?.height || 0,\n  current_fitness: {\n    fitness_level: profile?.current_fitness?.fitness_level || '',\n    training_frequency: profile?.current_fitness?.training_frequency || 3,\n    body_fat_percentage: profile?.current_fitness?.body_fat_percentage || 0,\n    personal_records: {\n      deadlift: profile?.current_fitness?.personal_records?.deadlift || 0,\n      squat: profile?.current_fitness?.personal_records?.squat || 0,\n      bench: profile?.current_fitness?.personal_records?.bench || 0,\n    }\n  },\n  goals: {\n    goal_types: profile?.goals?.goal_types || [],\n    target_weight: profile?.goals?.target_weight || 0,\n    target_body_fat: profile?.goals?.target_body_fat || 0,\n    target_personal_records: {\n      deadlift: profile?.goals?.target_personal_records?.deadlift || 0,\n      squat: profile?.goals?.target_personal_records?.squat || 0,\n      bench: profile?.goals?.target_personal_records?.bench || 0,\n    }\n  },\n});\n\n/**\n * Validate form data before submission\n * @param {Object} formData - Form data to validate\n * @returns {Object} Validation result with isValid flag and error message\n */\nexport const validateFormData = (formData) => {\n  // Age validation\n  if (formData.age < VALIDATION_RULES.MIN_AGE) {\n    return {\n      isValid: false,\n      error: `Age must be at least ${VALIDATION_RULES.MIN_AGE} years old.`\n    };\n  }\n  \n  // Training frequency validation\n  const { training_frequency } = formData.current_fitness;\n  if (training_frequency < VALIDATION_RULES.MIN_TRAINING_FREQUENCY || \n      training_frequency > VALIDATION_RULES.MAX_TRAINING_FREQUENCY) {\n    return {\n      isValid: false,\n      error: `Training frequency must be between ${VALIDATION_RULES.MIN_TRAINING_FREQUENCY} and ${VALIDATION_RULES.MAX_TRAINING_FREQUENCY} days per week.`\n    };\n  }\n  \n  // All validations passed\n  return { isValid: true, error: null };\n};\n\n/**\n * Update nested form data based on field name path\n * @param {Object} formData - Current form data\n * @param {string} fieldName - Field name (can be nested with dots)\n * @param {any} value - New value\n * @returns {Object} Updated form data\n */\nexport const updateFormField = (formData, fieldName, value) => {\n  if (!fieldName.includes('.')) {\n    return { ...formData, [fieldName]: value };\n  }\n\n  const parts = fieldName.split('.');\n  const newFormData = { ...formData };\n  \n  if (parts.length === 2) {\n    const [parent, child] = parts;\n    newFormData[parent] = { ...newFormData[parent], [child]: value };\n  } else if (parts.length === 3) {\n    const [parent, middle, child] = parts;\n    newFormData[parent] = {\n      ...newFormData[parent],\n      [middle]: { ...newFormData[parent][middle], [child]: value }\n    };\n  }\n  \n  return newFormData;\n};\n\n/**\n * Check if any personal records are set\n * @param {Object} personalRecords - Personal records object\n * @returns {boolean} True if any record is greater than 0\n */\nexport const hasPersonalRecords = (personalRecords) => {\n  if (!personalRecords) return false;\n  return personalRecords.deadlift > 0 || \n         personalRecords.squat > 0 || \n         personalRecords.bench > 0;\n};\n\n/**\n * Format display value for optional numeric fields\n * @param {number} value - Numeric value\n * @param {string} unit - Unit suffix\n * @returns {string} Formatted display string\n */\nexport const formatOptionalValue = (value, unit = '') => {\n  return value > 0 ? `${value}${unit}` : 'Not set';\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}