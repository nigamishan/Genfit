{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor to add the Authorization header from localStorage\napiClient.interceptors.request.use(config => {\n  const authDataString = localStorage.getItem('genfitAuth');\n  if (authDataString) {\n    try {\n      const authData = JSON.parse(authDataString);\n      if (authData && authData.token) {\n        config.headers.Authorization = `Basic ${authData.token}`;\n      }\n    } catch (e) {\n      console.error(\"Error parsing auth data from localStorage\", e);\n      // Optionally, clear the invalid item\n      // localStorage.removeItem('genfitAuth');\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// --- User Management --- Authenticated user uses /me, admin uses /admin/users/:username (not implemented here yet)\n\n// GET /users/me (Get your profile)\nexport const getMyProfile = () => apiClient.get('/users/me');\n\n// PUT /users/me (Update your profile)\nexport const updateMyProfile = profileData => apiClient.put('/users/me', profileData);\n\n// DELETE /users/me (Delete your account)\nexport const deleteMyAccount = () => apiClient.delete('/users/me');\n\n// POST /users (Create User - Public, but not part of the logged-in user flow defined for this UI)\n// export const createUser = (userData) => apiClient.post('/users', userData);\n\n// --- Progress Tracking --- All require auth\n\n// GET /progress/me (Get your progress)\nexport const getMyProgress = params => {\n  return apiClient.get('/progress/me', {\n    params,\n    paramsSerializer: {\n      indexes: false // This sends metric_types[]=value instead of metric_types[0]=value\n    }\n  });\n};\n\n// POST /progress (Log progress)\nexport const logProgress = progressData => apiClient.post('/progress', progressData);\n\n// GET /progress/me/summary (Get your progress summary)\nexport const getMyProgressSummary = params => {\n  return apiClient.get('/progress/me/summary', {\n    params,\n    paramsSerializer: {\n      indexes: false\n    }\n  });\n};\n\n// GET /progress/me/trend (Get your progress trend)\nexport const getMyProgressTrend = params => {\n  return apiClient.get('/progress/me/trend', {\n    params,\n    paramsSerializer: {\n      indexes: false\n    }\n  });\n};\n\n// DELETE /progress (Delete progress entry)\nexport const deleteProgressEntry = entryId => apiClient.delete('/progress', {\n  params: {\n    entryId\n  }\n});\n\n// --- Workout Plan Management --- All require auth\n\n// GET /workout/me (Get your workout plan)\nexport const getMyWorkoutPlan = () => apiClient.get('/workout/me');\n\n// POST /workout/manual (Create workout plan - backend has /workout/manual, UI implies updating existing via PUT /workout/me)\n// For simplicity, we'll assume a plan exists or is created, and /workout/me (PUT) handles its update.\n// If a user has no plan, getMyWorkoutPlan might return 404, then UI could prompt to create or use PUT to set one.\nexport const createWorkoutPlan = planData => apiClient.post('/workout/manual', planData);\n\n// PUT /workout/me (Update your workout plan)\nexport const updateMyWorkoutPlan = planData => apiClient.put('/workout/me', planData);\n\n// DELETE /workout/me (Delete your workout plan)\nexport const deleteMyWorkoutPlan = () => apiClient.delete('/workout/me');\n\n// --- Exercise Management (Admin & Public Search) ---\n\n// GET /exercises/search (Public search for exercises)\nexport const searchExercises = query => apiClient.get('/exercises/search', {\n  params: {\n    query\n  }\n});\n\n// Admin exercise functions (not used by regular user UI directly based on requirements, but good to list if API supports)\n// POST /admin/exercises\n// GET /admin/exercises\n// GET /admin/exercises/{id}\n// PUT /admin/exercises/{id}\n// DELETE /admin/exercises/{id}\n\n// --- Workout Volume ---\n\n// GET /workout/volume (Get daily workout volume data)\nexport const getWorkoutVolume = params => apiClient.get('/workout/volume', {\n  params\n}); // params: day (optional)\n\nexport default apiClient;\n\n// --- Authentication ---\n\n// POST /auth/login (Login with Basic Auth)\nexport const login = (username, password) => {\n  const credentials = btoa(`${username}:${password}`);\n  return apiClient.post('/auth/login', {}, {\n    headers: {\n      'Authorization': `Basic ${credentials}`\n    }\n  });\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","authDataString","localStorage","getItem","authData","JSON","parse","token","Authorization","e","console","error","Promise","reject","getMyProfile","get","updateMyProfile","profileData","put","deleteMyAccount","delete","getMyProgress","params","paramsSerializer","indexes","logProgress","progressData","post","getMyProgressSummary","getMyProgressTrend","deleteProgressEntry","entryId","getMyWorkoutPlan","createWorkoutPlan","planData","updateMyWorkoutPlan","deleteMyWorkoutPlan","searchExercises","query","getWorkoutVolume","login","username","password","credentials","btoa"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor to add the Authorization header from localStorage\napiClient.interceptors.request.use(\n  (config) => {\n    const authDataString = localStorage.getItem('genfitAuth');\n    if (authDataString) {\n      try {\n        const authData = JSON.parse(authDataString);\n        if (authData && authData.token) {\n          config.headers.Authorization = `Basic ${authData.token}`;\n        }\n      } catch (e) {\n        console.error(\"Error parsing auth data from localStorage\", e);\n        // Optionally, clear the invalid item\n        // localStorage.removeItem('genfitAuth');\n      }\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// --- User Management --- Authenticated user uses /me, admin uses /admin/users/:username (not implemented here yet)\n\n// GET /users/me (Get your profile)\nexport const getMyProfile = () => apiClient.get('/users/me');\n\n// PUT /users/me (Update your profile)\nexport const updateMyProfile = (profileData) => apiClient.put('/users/me', profileData);\n\n// DELETE /users/me (Delete your account)\nexport const deleteMyAccount = () => apiClient.delete('/users/me');\n\n// POST /users (Create User - Public, but not part of the logged-in user flow defined for this UI)\n// export const createUser = (userData) => apiClient.post('/users', userData);\n\n\n// --- Progress Tracking --- All require auth\n\n// GET /progress/me (Get your progress)\nexport const getMyProgress = (params) => {\n  return apiClient.get('/progress/me', { \n    params,\n    paramsSerializer: {\n      indexes: false // This sends metric_types[]=value instead of metric_types[0]=value\n    }\n  });\n};\n\n// POST /progress (Log progress)\nexport const logProgress = (progressData) => apiClient.post('/progress', progressData);\n\n// GET /progress/me/summary (Get your progress summary)\nexport const getMyProgressSummary = (params) => {\n  return apiClient.get('/progress/me/summary', { \n    params,\n    paramsSerializer: {\n      indexes: false\n    }\n  });\n};\n\n// GET /progress/me/trend (Get your progress trend)\nexport const getMyProgressTrend = (params) => {\n  return apiClient.get('/progress/me/trend', { \n    params,\n    paramsSerializer: {\n      indexes: false\n    }\n  });\n};\n\n// DELETE /progress (Delete progress entry)\nexport const deleteProgressEntry = (entryId) => apiClient.delete('/progress', { params: { entryId } });\n\n\n// --- Workout Plan Management --- All require auth\n\n// GET /workout/me (Get your workout plan)\nexport const getMyWorkoutPlan = () => apiClient.get('/workout/me');\n\n// POST /workout/manual (Create workout plan - backend has /workout/manual, UI implies updating existing via PUT /workout/me)\n// For simplicity, we'll assume a plan exists or is created, and /workout/me (PUT) handles its update.\n// If a user has no plan, getMyWorkoutPlan might return 404, then UI could prompt to create or use PUT to set one.\nexport const createWorkoutPlan = (planData) => apiClient.post('/workout/manual', planData);\n\n// PUT /workout/me (Update your workout plan)\nexport const updateMyWorkoutPlan = (planData) => apiClient.put('/workout/me', planData);\n\n// DELETE /workout/me (Delete your workout plan)\nexport const deleteMyWorkoutPlan = () => apiClient.delete('/workout/me');\n\n\n// --- Exercise Management (Admin & Public Search) ---\n\n// GET /exercises/search (Public search for exercises)\nexport const searchExercises = (query) => apiClient.get('/exercises/search', { params: { query } });\n\n// Admin exercise functions (not used by regular user UI directly based on requirements, but good to list if API supports)\n// POST /admin/exercises\n// GET /admin/exercises\n// GET /admin/exercises/{id}\n// PUT /admin/exercises/{id}\n// DELETE /admin/exercises/{id}\n\n// --- Workout Volume ---\n\n// GET /workout/volume (Get daily workout volume data)\nexport const getWorkoutVolume = (params) => apiClient.get('/workout/volume', { params }); // params: day (optional)\n\nexport default apiClient;\n\n// --- Authentication ---\n\n// POST /auth/login (Login with Basic Auth)\nexport const login = (username, password) => {\n  const credentials = btoa(`${username}:${password}`);\n  return apiClient.post('/auth/login', {}, {\n    headers: {\n      'Authorization': `Basic ${credentials}`\n    }\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}