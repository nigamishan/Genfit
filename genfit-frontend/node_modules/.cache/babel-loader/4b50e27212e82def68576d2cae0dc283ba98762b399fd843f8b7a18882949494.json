{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getMyProfile, updateMyProfile, deleteMyAccount } from '../api';\nimport { getInitialFormData, validateFormData, updateFormField } from '../utils/profileUtils';\n\n/**\n * Custom hook for managing profile data and operations\n * @returns {Object} Profile state and handlers\n */\nexport const useProfile = () => {\n  _s();\n  // State management\n  const [profile, setProfile] = useState(null);\n  const [formData, setFormData] = useState(getInitialFormData(null));\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const navigate = useNavigate();\n\n  /**\n   * Fetch user profile from API\n   */\n  const fetchProfile = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const {\n        data\n      } = await getMyProfile();\n      setProfile(data);\n      setFormData(getInitialFormData(data));\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch profile. Please try again.');\n\n      // Handle authentication errors\n      if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        localStorage.removeItem('genfitAuth');\n        navigate('/login', {\n          state: {\n            from: {\n              pathname: '/profile'\n            }\n          }\n        });\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Handle form field changes\n   */\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    const parsedValue = type === 'number' ? parseFloat(value) || 0 : value;\n    setFormData(prev => updateFormField(prev, name, parsedValue));\n  }, []);\n\n  /**\n   * Handle goal types multi-select change\n   */\n  const handleGoalTypesChange = useCallback(e => {\n    const value = e.target.value;\n    setFormData(prev => ({\n      ...prev,\n      goals: {\n        ...prev.goals,\n        goal_types: typeof value === 'string' ? value.split(',') : value\n      }\n    }));\n  }, []);\n\n  /**\n   * Submit form data to update profile\n   */\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    // Validate form data\n    const validation = validateFormData(formData);\n    if (!validation.isValid) {\n      setError(validation.error);\n      setLoading(false);\n      return;\n    }\n    try {\n      const {\n        data\n      } = await updateMyProfile(formData);\n      setProfile(data);\n      setFormData(getInitialFormData(data));\n      setIsEditing(false);\n      setSuccess('Profile updated successfully!');\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to update profile. Please ensure all fields are valid.');\n    } finally {\n      setLoading(false);\n    }\n  }, [formData]);\n\n  /**\n   * Delete user account\n   */\n  const handleDeleteAccount = useCallback(async () => {\n    setDeleteConfirmOpen(false);\n    setLoading(true);\n    setError('');\n    try {\n      await deleteMyAccount();\n      localStorage.removeItem('genfitAuth');\n      navigate('/login', {\n        state: {\n          message: 'Account deleted successfully.'\n        }\n      });\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to delete account.');\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Start editing mode\n   */\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n    setError('');\n    setSuccess('');\n  }, []);\n\n  /**\n   * Cancel editing and reset form\n   */\n  const cancelEditing = useCallback(() => {\n    setIsEditing(false);\n    setError('');\n    setSuccess('');\n    setFormData(getInitialFormData(profile));\n  }, [profile]);\n\n  /**\n   * Open delete confirmation dialog\n   */\n  const openDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  /**\n   * Close delete confirmation dialog\n   */\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(false);\n  }, []);\n\n  // Fetch profile on mount\n  useEffect(() => {\n    fetchProfile();\n  }, [fetchProfile]);\n\n  // Return state and handlers\n  return {\n    // State\n    profile,\n    formData,\n    loading,\n    error,\n    success,\n    isEditing,\n    deleteConfirmOpen,\n    // Handlers\n    handleChange,\n    handleGoalTypesChange,\n    handleSubmit,\n    handleDeleteAccount,\n    startEditing,\n    cancelEditing,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    // Utilities\n    refetchProfile: fetchProfile\n  };\n};\n_s(useProfile, \"VI9Y6Ok2c744bbUWOoqmFXlDJms=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","getMyProfile","updateMyProfile","deleteMyAccount","getInitialFormData","validateFormData","updateFormField","useProfile","_s","profile","setProfile","formData","setFormData","loading","setLoading","error","setError","success","setSuccess","isEditing","setIsEditing","deleteConfirmOpen","setDeleteConfirmOpen","navigate","fetchProfile","data","err","_err$response","_err$response$data","_err$response2","response","message","status","localStorage","removeItem","state","from","pathname","handleChange","e","name","value","type","target","parsedValue","parseFloat","prev","handleGoalTypesChange","goals","goal_types","split","handleSubmit","preventDefault","validation","isValid","_err$response3","_err$response3$data","handleDeleteAccount","_err$response4","_err$response4$data","startEditing","cancelEditing","openDeleteConfirm","closeDeleteConfirm","refetchProfile"],"sources":["/Users/ishannigam/Code/Example/Genfit/genfit-frontend/src/hooks/useProfile.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getMyProfile, updateMyProfile, deleteMyAccount } from '../api';\nimport { getInitialFormData, validateFormData, updateFormField } from '../utils/profileUtils';\n\n/**\n * Custom hook for managing profile data and operations\n * @returns {Object} Profile state and handlers\n */\nexport const useProfile = () => {\n  // State management\n  const [profile, setProfile] = useState(null);\n  const [formData, setFormData] = useState(getInitialFormData(null));\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  \n  const navigate = useNavigate();\n\n  /**\n   * Fetch user profile from API\n   */\n  const fetchProfile = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const { data } = await getMyProfile();\n      setProfile(data);\n      setFormData(getInitialFormData(data));\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to fetch profile. Please try again.');\n      \n      // Handle authentication errors\n      if (err.response?.status === 401) {\n        localStorage.removeItem('genfitAuth');\n        navigate('/login', { state: { from: { pathname: '/profile' } } });\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Handle form field changes\n   */\n  const handleChange = useCallback((e) => {\n    const { name, value, type } = e.target;\n    const parsedValue = type === 'number' ? parseFloat(value) || 0 : value;\n    \n    setFormData(prev => updateFormField(prev, name, parsedValue));\n  }, []);\n\n  /**\n   * Handle goal types multi-select change\n   */\n  const handleGoalTypesChange = useCallback((e) => {\n    const value = e.target.value;\n    setFormData(prev => ({\n      ...prev,\n      goals: {\n        ...prev.goals,\n        goal_types: typeof value === 'string' ? value.split(',') : value\n      }\n    }));\n  }, []);\n\n  /**\n   * Submit form data to update profile\n   */\n  const handleSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    // Validate form data\n    const validation = validateFormData(formData);\n    if (!validation.isValid) {\n      setError(validation.error);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const { data } = await updateMyProfile(formData);\n      setProfile(data);\n      setFormData(getInitialFormData(data));\n      setIsEditing(false);\n      setSuccess('Profile updated successfully!');\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update profile. Please ensure all fields are valid.');\n    } finally {\n      setLoading(false);\n    }\n  }, [formData]);\n\n  /**\n   * Delete user account\n   */\n  const handleDeleteAccount = useCallback(async () => {\n    setDeleteConfirmOpen(false);\n    setLoading(true);\n    setError('');\n    \n    try {\n      await deleteMyAccount();\n      localStorage.removeItem('genfitAuth');\n      navigate('/login', { state: { message: 'Account deleted successfully.' } });\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to delete account.');\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  /**\n   * Start editing mode\n   */\n  const startEditing = useCallback(() => {\n    setIsEditing(true);\n    setError('');\n    setSuccess('');\n  }, []);\n\n  /**\n   * Cancel editing and reset form\n   */\n  const cancelEditing = useCallback(() => {\n    setIsEditing(false);\n    setError('');\n    setSuccess('');\n    setFormData(getInitialFormData(profile));\n  }, [profile]);\n\n  /**\n   * Open delete confirmation dialog\n   */\n  const openDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  /**\n   * Close delete confirmation dialog\n   */\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmOpen(false);\n  }, []);\n\n  // Fetch profile on mount\n  useEffect(() => {\n    fetchProfile();\n  }, [fetchProfile]);\n\n  // Return state and handlers\n  return {\n    // State\n    profile,\n    formData,\n    loading,\n    error,\n    success,\n    isEditing,\n    deleteConfirmOpen,\n    \n    // Handlers\n    handleChange,\n    handleGoalTypesChange,\n    handleSubmit,\n    handleDeleteAccount,\n    startEditing,\n    cancelEditing,\n    openDeleteConfirm,\n    closeDeleteConfirm,\n    \n    // Utilities\n    refetchProfile: fetchProfile\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}